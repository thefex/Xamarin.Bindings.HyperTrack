// Generated by Apple Swift version 4.1.2 effective-3.3.2 (swiftlang-902.0.54 clang-902.0.39.2)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#include <objc/NSObject.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...)
# endif
#endif

#if __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if __has_attribute(objc_method_family)
# define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
#else
# define SWIFT_METHOD_FAMILY(X)
#endif
#if __has_attribute(noescape)
# define SWIFT_NOESCAPE __attribute__((noescape))
#else
# define SWIFT_NOESCAPE
#endif
#if __has_attribute(warn_unused_result)
# define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
#else
# define SWIFT_WARN_UNUSED_RESULT
#endif
#if __has_attribute(noreturn)
# define SWIFT_NORETURN __attribute__((noreturn))
#else
# define SWIFT_NORETURN
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if defined(__has_attribute) && __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR __attribute__((enum_extensibility(open)))
# else
#  define SWIFT_ENUM_ATTR
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name) enum _name : _type _name; enum SWIFT_ENUM_ATTR SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME) SWIFT_ENUM(_type, _name)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if __has_feature(attribute_diagnose_if_objc)
# define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
#else
# define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
#endif
#if __has_feature(modules)
@import ObjectiveC;
@import Foundation;
@import CoreLocation;
@import MapKit;
@import UIKit;
@import CoreGraphics;
#endif

#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="HyperTrack",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif

typedef SWIFT_ENUM(NSInteger, AnchorPosition) {
  AnchorPositionTop = 0,
  AnchorPositionBottom = 1,
  AnchorPositionLeft = 2,
  AnchorPositionRight = 3,
  AnchorPositionTopLeft = 4,
  AnchorPositionTopRight = 5,
  AnchorPositionCenter = 6,
};

@class HTUser;
@class HTPlace;
@class Display;
@class HTLocation;
@class HTHealth;
@class HTActivity;

SWIFT_CLASS("_TtC10HyperTrack8HTAction")
@interface HTAction : NSObject
/// ******** Defined by you when creating action *********
/// Unique identifier for the action object, set by you. It can be based on your internal ID
@property (nonatomic, readonly, copy) NSString * _Nonnull uniqueId;
/// Identifier provided by you to club and sequence actions; can be based on your internal ID
@property (nonatomic, readonly, copy) NSString * _Nonnull collectionId;
/// Type of action, e.g., pickup, delivery, dropoff, visit, stopover, task
@property (nonatomic, readonly, copy) NSString * _Nonnull type;
/// User object to which the action is assigned
@property (nonatomic, readonly, strong) HTUser * _Nullable user;
@property (nonatomic, readonly, copy) NSDictionary<NSString *, id> * _Nonnull metadata;
/// ******** Set by hypertrack when action created *********
/// Unique identifier for the action object, created by HyperTrack
@property (nonatomic, readonly, copy) NSString * _Nonnull id;
/// URL at which this action can be tracked. This URL can be shared with anyone. It uses the track API (https://docs.hypertrack.com/api/entities/actionv2.html#track-an-action)
@property (nonatomic, readonly, copy) NSString * _Nonnull trackingUrl;
/// ******** Defined by you when completing or canceling action *********
/// Custom text to save metadata around completion or cancelation of action.
/// It can be used to store text like success, failure, rescheduled.
/// It is derived by hypertrack if you request hypertrack to automatically complete or cancel an action, and
/// explains what triggerd it
@property (nonatomic, readonly, copy) NSString * _Nonnull endedAnnotation;
@property (nonatomic, readonly) BOOL isAutocompleteAtExpectedPlace;
/// Flag that programs hypertrack to create and complete the action at the same time.
/// This is useful if you want to just annotate a point in time and location.
/// Default is false
@property (nonatomic, readonly) BOOL isAutocompleteAtCreation;
/// Time at which you want hypertrack to automatically cancel the action, if it has not been completed till then.
/// This is useful for garbage collection in case the action is not completed by the user.
/// Default is 24 hours from created_at
@property (nonatomic, readonly, copy) NSDate * _Nullable scheduleAutoCancelAt;
/// ******** Derived by hypertrack *********
/// Current status of the action. See below for possible values
@property (nonatomic, readonly, copy) NSString * _Nonnull status;
/// Time till which the action properties have been updated.
/// It is the time that hypertrack last heard from the device corresponding to this action.
/// Once the status changes to started hypertrack strives to keep this time as close to current time,
/// so that you can track actions in real-time
@property (nonatomic, readonly, copy) NSDate * _Nullable updatedAt;
/// Time at which the action was created
@property (nonatomic, readonly, copy) NSDate * _Nullable createdAt;
/// Time at which the actionâ€™s status changed to started.
/// If the action was created when there was no other pending action for that user, started_at would be same as created_at
@property (nonatomic, readonly, copy) NSDate * _Nullable startedAt;
/// Time at which the action was completed or canceled.
/// If the action status is completed then this is the time you completed the action,
/// if it is autocompleted then this is the time hypertrack automatically completed the action and
/// similarly for canceled and autocanceled
@property (nonatomic, readonly, copy) NSDate * _Nullable endedAt;
/// Place where the actionâ€™s status changed to started
@property (nonatomic, readonly, strong) HTPlace * _Nullable startedPlace;
/// Place where the action was completed
@property (nonatomic, readonly, strong) HTPlace * _Nullable completedPlace;
/// Distance traveled, in metres, between started_place and completed_place.
/// For actions that havenâ€™t been completed yet, the distance is calculated till the current time
@property (nonatomic, readonly) NSInteger distance;
/// Route traveled by user with timestamps, in hypertrackâ€™s time aware polyline format.
/// Use this to replay the route
@property (nonatomic, readonly, copy) NSString * _Nullable locationTimeSeries;
/// ******** Expected movement properties *********
/// ******** Defined by you when creating action *********
/// Place where the action is expected to be completed.
/// It is used to calculate eta of an action, and once the action is completed it is used to check
/// if action was completed at a place different from where it was expected to be
@property (nonatomic, readonly, strong) HTPlace * _Nullable expectedPlace;
/// Time by when the action is expected to be completed.
/// It is used to calculate if an action is delayed
@property (nonatomic, readonly, copy) NSDate * _Nullable expectedAt;
/// ******** Derived by hypertrack *********
/// Current sub status of the action.
/// Possible values are leaving_now, on_the_way, arriving, arrived and moving_away.
/// It is an empty string if expected_place is not defined by the user.
/// It is an empty string if the action status is created.
/// It starts getting updated once the action status changes to started and
/// keeps getting updated till status changes to completed or autocompleted or canceled or autocanceled
@property (nonatomic, readonly, copy) NSString * _Nonnull arrivalStatus;
/// Current ETA.
/// It is the time estimated to move from the current location of the user
/// to the expected_place factoring for traffic
@property (nonatomic, readonly, copy) NSDate * _Nullable eta;
/// ETA estimated at the time when action was created.
/// It is the time estimated to move from current location of the user at created_at time to the expected_place.
/// It is useful in comparing how the the eta changes from the time that the action was created
@property (nonatomic, readonly, copy) NSDate * _Nullable etaAtCreation;
/// Distance in metres, of encodedPolylineToArrival
@property (nonatomic, readonly) NSInteger distanceToArrival;
@property (nonatomic, readonly, strong) Display * _Nullable display;
@property (nonatomic, readonly, strong) HTLocation * _Nullable location;
@property (nonatomic, readonly, copy) NSDate * _Nullable completedAt;
@property (nonatomic, readonly, copy) NSString * _Nullable expectedRoute;
@property (nonatomic, readonly, copy) NSString * _Nullable route;
@property (nonatomic, readonly, copy) NSDictionary<NSString *, id> * _Nullable completedAnnotation;
@property (nonatomic, readonly, strong) HTHealth * _Nullable health;
@property (nonatomic, readonly, strong) HTActivity * _Nullable activity;
- (nonnull instancetype)initWithDict:(NSDictionary<NSString *, id> * _Nonnull)dict OBJC_DESIGNATED_INITIALIZER;
- (NSString * _Nullable)toJson SWIFT_WARN_UNUSED_RESULT;
- (NSData * _Nullable)toJsonData SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC10HyperTrack12HTActionInfo")
@interface HTActionInfo : NSObject
@property (nonatomic, readonly, copy) NSString * _Nonnull actionStatus;
- (nonnull instancetype)initWithActionStatus:(NSString * _Nonnull)actionStatus OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end


/// Instances of HTActionParams are used to build actions: https://docs.hypertrack.com/api/entities/action.html
SWIFT_CLASS("_TtC10HyperTrack14HTActionParams")
@interface HTActionParams : NSObject
/// Identifier of user to whom the action is assigned. Use setUserId to set this.
@property (nonatomic, copy) NSString * _Nullable userId;
/// Identifier of place where the action is to be completed. Use setExpectedPlaceId to set this.
@property (nonatomic, copy) NSString * _Nullable expectedPlaceId;
/// Expected place where the action is to be completed. Use setExpectedPlace to set this.
@property (nonatomic, strong) HTPlace * _Nullable expectedPlace;
/// Type of the action. Use setType to set this.
@property (nonatomic, copy) NSString * _Nonnull type;
/// Unique id (internal identifier) for the action. Use setUniqueId to set this.
@property (nonatomic, copy) NSString * _Nonnull uniqueId;
/// Collection id (internal identifier) for the action. Use setCollectionId to set this.
@property (nonatomic, copy) NSString * _Nonnull collectionId;
/// Set Unique id for the action as a unique Short Code (6-8 digit alphanumeric
/// string) automatically generated for the Actionâ€™s tracking url.
@property (nonatomic) BOOL uniqueIdAsShortCode;
/// Expected time for the action. Use setExpectedAt to set this.
@property (nonatomic, copy) NSString * _Nullable expectedAt;
/// Rules to autocomplete action based on time or place.
@property (nonatomic, copy) NSDictionary<NSString *, id> * _Nullable autocompleteRule;
/// Custom key-values pairs in your system that you want to associate with the action.
@property (nonatomic, copy) NSDictionary<NSString *, id> * _Nullable metadata;
/// Set user id for the action
/// \param userId UUID identifier for the user
///
- (HTActionParams * _Nonnull)setUserIdWithUserId:(NSString * _Nonnull)userId SWIFT_WARN_UNUSED_RESULT;
/// Set expected place for the action
/// \param expectedPlace Place object
///
- (HTActionParams * _Nonnull)setExpectedPlaceWithExpectedPlace:(HTPlace * _Nonnull)expectedPlace SWIFT_WARN_UNUSED_RESULT;
/// Set expected place for the action
/// \param expectedPlaceId UUID identifier for the place
///
- (HTActionParams * _Nonnull)setExpectedPlaceIdWithExpectedPlaceId:(NSString * _Nonnull)expectedPlaceId SWIFT_WARN_UNUSED_RESULT;
/// Set type for the action
/// \param type UUID identifier for the place
///
- (HTActionParams * _Nonnull)setTypeWithType:(NSString * _Nonnull)type SWIFT_WARN_UNUSED_RESULT;
/// Set unique id for the action
/// \param uniqueId unique id for the action
///
- (HTActionParams * _Nonnull)setUniqueIdWithUniqueId:(NSString * _Nonnull)uniqueId SWIFT_WARN_UNUSED_RESULT;
/// Set Unique id for the action as a unique Short Code (6-8 digit alphanumeric
/// string) automatically generated for the Actionâ€™s tracking url.
- (HTActionParams * _Nonnull)setUniqueIdAsShortCode SWIFT_WARN_UNUSED_RESULT;
/// Set expected at for the action
/// \param expectedAt expected timestamp as ISO datetime string
///
- (HTActionParams * _Nonnull)setExpectedAtExpectedAt:(NSString * _Nonnull)expectedAt SWIFT_WARN_UNUSED_RESULT;
- (HTActionParams * _Nonnull)setAutocompleteRuleWithRule:(NSDictionary<NSString *, id> * _Nonnull)rule SWIFT_WARN_UNUSED_RESULT;
- (HTActionParams * _Nonnull)setAutocancelAfterHours:(NSInteger)hours SWIFT_WARN_UNUSED_RESULT;
- (HTActionParams * _Nonnull)setMetaDataWithMetadata:(NSDictionary<NSString *, id> * _Nonnull)metadata SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


@interface HTActionParams (SWIFT_EXTENSION(HyperTrack))
- (nonnull instancetype)initWithType:(NSString * _Nonnull)type;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong, getter=default) HTActionParams * _Nonnull default_;)
+ (HTActionParams * _Nonnull)default SWIFT_WARN_UNUSED_RESULT;
@end


SWIFT_CLASS("_TtC10HyperTrack10HTActivity")
@interface HTActivity : NSObject
@property (nonatomic, readonly, copy) NSString * _Nonnull id;
@property (nonatomic, readonly, copy) NSString * _Nonnull userId;
@property (nonatomic, readonly, copy) NSString * _Nullable lookupId;
@property (nonatomic, readonly, copy) NSString * _Nonnull type;
@property (nonatomic, readonly, copy) NSString * _Nullable unknownReason;
@property (nonatomic, readonly, copy) NSDate * _Nullable startedAt;
@property (nonatomic, readonly, copy) NSDate * _Nullable endedAt;
@property (nonatomic, readonly, strong) HTPlace * _Nullable place;
@property (nonatomic, readonly, copy) NSString * _Nullable route;
@property (nonatomic, readonly, copy) NSString * _Nullable locationTimeSeries;
@property (nonatomic, readonly, copy) NSString * _Nullable stepDistance;
@property (nonatomic, readonly, copy) NSDate * _Nullable createdAt;
@property (nonatomic, readonly, copy) NSDate * _Nullable modifiedAt;
- (nonnull instancetype)initWithDict:(NSDictionary<NSString *, id> * _Nonnull)dict OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end

@protocol HTMapUseCaseDelegate;

SWIFT_PROTOCOL("_TtP10HyperTrack16HTMapViewUseCase_")
@protocol HTMapViewUseCase
@property (nonatomic, strong) id <HTMapUseCaseDelegate> _Nullable mapDelegate;
- (void)update;
- (nonnull instancetype)initWithMapDelegate:(id <HTMapUseCaseDelegate> _Nullable)mapDelegate;
@end

@protocol HTBaseUseCaseDelegate;

SWIFT_CLASS("_TtC10HyperTrack13HTBaseUseCase")
@interface HTBaseUseCase : NSObject
@property (nonatomic, weak) id <HTBaseUseCaseDelegate> _Nullable delegate;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class HTLiveTrackingUseCase;
@class HTPlaceLineUseCase;
@protocol HTActivitySummaryUseCaseDelegate;

SWIFT_CLASS("_TtC10HyperTrack24HTActivitySummaryUseCase")
@interface HTActivitySummaryUseCase : HTBaseUseCase <HTMapViewUseCase>
@property (nonatomic, weak) id <HTMapUseCaseDelegate> _Nullable mapDelegate;
@property (nonatomic, readonly, strong) HTLiveTrackingUseCase * _Null_unspecified liveUC;
@property (nonatomic, readonly, strong) HTPlaceLineUseCase * _Null_unspecified placelineUC;
@property (nonatomic, weak) id <HTActivitySummaryUseCaseDelegate> _Nullable activityDelegate;
@property (nonatomic) BOOL isPrimaryActionHidden;
- (nonnull instancetype)init;
- (nonnull instancetype)initWithMapDelegate:(id <HTMapUseCaseDelegate> _Nullable)mapDelegate;
- (nonnull instancetype)initWithLiveUseCase:(HTLiveTrackingUseCase * _Nullable)liveUseCase placelineUseCase:(HTPlaceLineUseCase * _Nullable)placelineUseCase OBJC_DESIGNATED_INITIALIZER;
- (void)update;
- (void)enabeLiveTracking;
@end


SWIFT_PROTOCOL("_TtP10HyperTrack27HTUseCaseNavigationDelegate_")
@protocol HTUseCaseNavigationDelegate
- (void)backClicked;
@end


@interface HTActivitySummaryUseCase (SWIFT_EXTENSION(HyperTrack)) <HTUseCaseNavigationDelegate>
- (void)backClicked;
@end


SWIFT_PROTOCOL("_TtP10HyperTrack26HTPlaceLineUseCaseDelegate_")
@protocol HTPlaceLineUseCaseDelegate
@end


SWIFT_PROTOCOL("_TtP10HyperTrack21HTBaseUseCaseDelegate_")
@protocol HTBaseUseCaseDelegate
- (void)showLoader:(BOOL)show;
@end

@class HTTrackWithTypeData;

SWIFT_PROTOCOL("_TtP10HyperTrack29HTLiveTrackingUseCaseDelegate_")
@protocol HTLiveTrackingUseCaseDelegate <HTBaseUseCaseDelegate>
- (void)shareLiveTrackingDetails:(NSString * _Nonnull)url eta:(NSString * _Nonnull)eta;
- (void)shareLiveLocationClicked;
- (void)liveTrackingEnded:(HTTrackWithTypeData * _Nonnull)type;
@end


SWIFT_PROTOCOL("_TtP10HyperTrack32HTActivitySummaryUseCaseDelegate_")
@protocol HTActivitySummaryUseCaseDelegate <HTLiveTrackingUseCaseDelegate, HTPlaceLineUseCaseDelegate>
@end

@class MetaData;
@class HTCallout;
@class HTTimeAwarePolyline;

SWIFT_CLASS("_TtC10HyperTrack16HTAnnotationData")
@interface HTAnnotationData : NSObject
@property (nonatomic, readonly, copy) NSString * _Nonnull id;
@property (nonatomic, readonly) CLLocationCoordinate2D coordinate;
@property (nonatomic, readonly, strong) MetaData * _Nonnull metaData;
@property (nonatomic, readonly, strong) HTCallout * _Nullable callout;
@property (nonatomic, readonly, strong) HTTimeAwarePolyline * _Nullable locationTimeSeries;
@property (nonatomic, readonly) BOOL isCurrentUser;
- (nonnull instancetype)initWithId:(NSString * _Nonnull)id coordinate:(CLLocationCoordinate2D)coordinate metaData:(MetaData * _Nonnull)metaData callout:(HTCallout * _Nullable)callout isCurrentUser:(BOOL)isCurrentUser locationTimeSeries:(HTTimeAwarePolyline * _Nullable)locationTimeSeries OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end

typedef SWIFT_ENUM(NSInteger, HTAnnotationType) {
  HTAnnotationTypeUser = 0,
  HTAnnotationTypeCurrentUser = 1,
  HTAnnotationTypeDestination = 2,
  HTAnnotationTypeError = 3,
  HTAnnotationTypeNone = 4,
};

@class UIView;
@protocol HTMapViewUpdatesDelegate;

SWIFT_CLASS("_TtC10HyperTrack19HTAppleMapsProvider")
@interface HTAppleMapsProvider : NSObject
@property (nonatomic, readonly, strong) UIView * _Nonnull contentView;
@property (nonatomic) BOOL showCurrentLocation;
@property (nonatomic, weak) id <HTMapViewUpdatesDelegate> _Nullable updatesDelegate;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end


@interface HTAppleMapsProvider (SWIFT_EXTENSION(HyperTrack))
- (void)centerMapOnAllAnnotations:(BOOL)animated;
@end

@class MKMapView;
@class MKUserLocation;
@protocol MKAnnotation;
@class MKAnnotationView;
@protocol MKOverlay;
@class MKOverlayRenderer;

@interface HTAppleMapsProvider (SWIFT_EXTENSION(HyperTrack)) <MKMapViewDelegate>
- (void)mapView:(MKMapView * _Nonnull)mapView didUpdateUserLocation:(MKUserLocation * _Nonnull)userLocation;
- (void)mapViewDidFinishLoadingMap:(MKMapView * _Nonnull)mapView;
- (MKAnnotationView * _Nullable)mapView:(MKMapView * _Nonnull)mapView viewForAnnotation:(id <MKAnnotation> _Nonnull)annotation SWIFT_WARN_UNUSED_RESULT;
- (MKOverlayRenderer * _Nonnull)mapView:(MKMapView * _Nonnull)mapView rendererForOverlay:(id <MKOverlay> _Nonnull)overlay SWIFT_WARN_UNUSED_RESULT;
- (void)mapView:(MKMapView * _Nonnull)mapView regionWillChangeAnimated:(BOOL)animated;
- (void)mapView:(MKMapView * _Nonnull)mapView regionDidChangeAnimated:(BOOL)animated;
@end

@class HTPolylineData;

SWIFT_PROTOCOL("_TtP10HyperTrack17HTMapViewDelegate_")
@protocol HTMapViewDelegate
@property (nonatomic) BOOL showCurrentLocation;
- (void)cleanUp;
- (void)addAnnotations:(NSArray<HTAnnotationData *> * _Nonnull)data;
- (void)addPolyline:(NSArray<HTPolylineData *> * _Nonnull)data;
- (void)addTrailingPolyline:(NSArray<HTTimeAwarePolyline *> * _Nonnull)data;
- (void)updateMapVisibleRegion:(UIEdgeInsets)insets;
- (CLLocationCoordinate2D)getCenterCoordinates SWIFT_WARN_UNUSED_RESULT;
- (void)showCoordinates:(NSArray<NSValue *> * _Nonnull)coordinates;
@end


SWIFT_PROTOCOL("_TtP10HyperTrack22HTMapsProviderProtocol_")
@protocol HTMapsProviderProtocol <HTMapViewDelegate>
@property (nonatomic, strong) id <HTMapViewUpdatesDelegate> _Nullable updatesDelegate;
@property (nonatomic, readonly, strong) UIView * _Nonnull contentView;
- (void)centerMapOnAllAnnotations:(BOOL)animated;
@end


@interface HTAppleMapsProvider (SWIFT_EXTENSION(HyperTrack)) <HTMapsProviderProtocol>
- (void)cleanUp;
- (void)addAnnotations:(NSArray<HTAnnotationData *> * _Nonnull)data;
- (void)addPolyline:(NSArray<HTPolylineData *> * _Nonnull)data;
- (void)showCoordinates:(NSArray<NSValue *> * _Nonnull)coordinates;
- (void)addTrailingPolyline:(NSArray<HTTimeAwarePolyline *> * _Nonnull)data;
- (void)updateMapVisibleRegion:(UIEdgeInsets)insets;
- (CLLocationCoordinate2D)getCenterCoordinates SWIFT_WARN_UNUSED_RESULT;
@end


SWIFT_PROTOCOL("_TtP10HyperTrack23HTAuxillaryFlowDelegate_")
@protocol HTAuxillaryFlowDelegate
- (void)cancelClicked;
@end

@protocol HTBaseTrackingViewModelProtocol;
@class HTTrackAction;
@class HTError;

SWIFT_CLASS("_TtC10HyperTrack21HTBaseTrackingUseCase")
@interface HTBaseTrackingUseCase : HTBaseUseCase
@property (nonatomic) double pollDuration;
@property (nonatomic, readonly) BOOL isPollingEnabled;
- (void)update;
- (nonnull instancetype)initWithViewModel:(id <HTBaseTrackingViewModelProtocol> _Nullable)viewModel OBJC_DESIGNATED_INITIALIZER;
- (void)stop;
- (void)trackActionWithType:(HTTrackWithTypeData * _Nonnull)type pollDuration:(double)pollDuration completionHandler:(void (^ _Nullable)(NSArray<HTTrackAction *> * _Nullable, HTError * _Nullable))completionHandler;
- (void)trackActionWithIds:(NSArray<NSString *> * _Nonnull)ids pollDuration:(double)pollDuration completionHandler:(void (^ _Nullable)(NSArray<HTTrackAction *> * _Nullable, HTError * _Nullable))completionHandler;
- (void)trackActionWithCollectionId:(NSString * _Nonnull)id pollDuration:(double)pollDuration completionHandler:(void (^ _Nullable)(NSArray<HTTrackAction *> * _Nullable, HTError * _Nullable))completionHandler;
- (void)trackActionWithUniqueId:(NSString * _Nonnull)id pollDuration:(double)pollDuration completionHandler:(void (^ _Nullable)(NSArray<HTTrackAction *> * _Nullable, HTError * _Nullable))completionHandler;
- (void)trackActionWithShortCodes:(NSArray<NSString *> * _Nonnull)codes pollDuration:(double)pollDuration completionHandler:(void (^ _Nullable)(NSArray<HTTrackAction *> * _Nullable, HTError * _Nullable))completionHandler;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end




SWIFT_PROTOCOL("_TtP10HyperTrack23HTBaseViewModelProtocol_")
@protocol HTBaseViewModelProtocol
@end


SWIFT_PROTOCOL("_TtP10HyperTrack31HTBaseTrackingViewModelProtocol_")
@protocol HTBaseTrackingViewModelProtocol <HTBaseViewModelProtocol>
- (void)completeAction:(NSString * _Nonnull)id completionHandler:(void (^ _Nullable)(HTAction * _Nullable, HTError * _Nullable))completionHandler;
- (void)trackActionWithIds:(NSArray<NSString *> * _Nonnull)ids completionHandler:(void (^ _Nullable)(NSArray<HTTrackAction *> * _Nullable, HTError * _Nullable))completionHandler;
- (void)trackActionWithCollectionId:(NSString * _Nonnull)id completionHandler:(void (^ _Nullable)(NSArray<HTTrackAction *> * _Nullable, HTError * _Nullable))completionHandler;
- (void)trackActionWithUniqueId:(NSString * _Nonnull)id completionHandler:(void (^ _Nullable)(NSArray<HTTrackAction *> * _Nullable, HTError * _Nullable))completionHandler;
- (void)trackActionWithShortCodes:(NSArray<NSString *> * _Nonnull)codes completionHandler:(void (^ _Nullable)(NSArray<HTTrackAction *> * _Nullable, HTError * _Nullable))completionHandler;
- (void)addExpectedPlaceWithActionId:(NSString * _Nonnull)actionId newPlace:(HTPlace * _Nonnull)newPlace completionHandler:(void (^ _Nullable)(HTAction * _Nullable, HTError * _Nullable))completionHandler;
- (void)addExpectedPlaceWithCollectionId:(NSString * _Nonnull)collectionId newPlace:(HTPlace * _Nonnull)newPlace completionHandler:(void (^ _Nullable)(HTAction * _Nullable, HTError * _Nullable))completionHandler;
@end


SWIFT_CLASS("_TtC10HyperTrack23HTBaseTrackingViewModel")
@interface HTBaseTrackingViewModel : NSObject <HTBaseTrackingViewModelProtocol>
- (void)trackActionWithIds:(NSArray<NSString *> * _Nonnull)ids completionHandler:(void (^ _Nullable)(NSArray<HTTrackAction *> * _Nullable, HTError * _Nullable))completionHandler;
- (void)trackActionWithCollectionId:(NSString * _Nonnull)id completionHandler:(void (^ _Nullable)(NSArray<HTTrackAction *> * _Nullable, HTError * _Nullable))completionHandler;
- (void)trackActionWithUniqueId:(NSString * _Nonnull)id completionHandler:(void (^ _Nullable)(NSArray<HTTrackAction *> * _Nullable, HTError * _Nullable))completionHandler;
- (void)trackActionWithShortCodes:(NSArray<NSString *> * _Nonnull)codes completionHandler:(void (^ _Nullable)(NSArray<HTTrackAction *> * _Nullable, HTError * _Nullable))completionHandler;
- (void)addExpectedPlaceWithActionId:(NSString * _Nonnull)actionId newPlace:(HTPlace * _Nonnull)newPlace completionHandler:(void (^ _Nullable)(HTAction * _Nullable, HTError * _Nullable))completionHandler;
- (void)addExpectedPlaceWithCollectionId:(NSString * _Nonnull)collectionId newPlace:(HTPlace * _Nonnull)newPlace completionHandler:(void (^ _Nullable)(HTAction * _Nullable, HTError * _Nullable))completionHandler;
- (void)completeAction:(NSString * _Nonnull)id completionHandler:(void (^ _Nullable)(HTAction * _Nullable, HTError * _Nullable))completionHandler;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end




@class UIColor;
@class NSCoder;

SWIFT_CLASS("_TtC10HyperTrack10HTBaseView")
@interface HTBaseView : UIView
@property (nonatomic) BOOL enableShadow;
@property (nonatomic, strong) UIColor * _Nullable dashBorderedColor;
@property (nonatomic) CGFloat topCornerRadius;
- (void)layoutSubviews;
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@end



SWIFT_PROTOCOL("_TtP10HyperTrack24HTBasicComponentProtocol_")
@protocol HTBasicComponentProtocol
@end


SWIFT_CLASS("_TtC10HyperTrack22HTBottomViewActionData")
@interface HTBottomViewActionData : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end

typedef SWIFT_ENUM(NSInteger, HTBottomViewActionType) {
  HTBottomViewActionTypeShare = 0,
  HTBottomViewActionTypeStopSharing = 1,
  HTBottomViewActionTypeCall = 2,
  HTBottomViewActionTypeNone = 3,
};


SWIFT_CLASS("_TtC10HyperTrack21HTBottomViewContainer")
@interface HTBottomViewContainer : UIView
@property (nonatomic) BOOL isShadowEnabled;
@property (nonatomic) BOOL isBlurEnabled;
- (void)setContentView:(UIView * _Nullable)contentView;
- (nonnull instancetype)init;
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_PROTOCOL("_TtP10HyperTrack27HTBottomViewUseCaseDelegate_")
@protocol HTBottomViewUseCaseDelegate
- (void)actionPerformed:(HTBottomViewActionData * _Nonnull)data;
@end


SWIFT_CLASS("_TtC10HyperTrack8HTButton")
@interface HTButton : UIButton
@property (nonatomic) CGFloat topCornerRadius;
- (void)layoutSubviews;
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_PROTOCOL("_TtP10HyperTrack18HTCalendarDelegate_")
@protocol HTCalendarDelegate
- (void)didSelectDate:(NSDate * _Nonnull)date;
@end


SWIFT_PROTOCOL("_TtP10HyperTrack26HTCalendarProviderProtocol_")
@protocol HTCalendarProviderProtocol
@property (nonatomic, readonly, strong) UIView * _Nonnull contentView;
@property (nonatomic, copy) NSDate * _Nonnull minimumDate;
@property (nonatomic, copy) NSDate * _Nonnull maximumDate;
@property (nonatomic, strong) id <HTCalendarDelegate> _Nullable delegate;
@end


SWIFT_CLASS("_TtC10HyperTrack18HTCalendarProvider")
@interface HTCalendarProvider : NSObject <HTCalendarProviderProtocol>
@property (nonatomic, readonly, strong) UIView * _Nonnull contentView;
@property (nonatomic, weak) id <HTCalendarDelegate> _Nullable delegate;
@property (nonatomic, copy) NSDate * _Nonnull minimumDate;
@property (nonatomic, copy) NSDate * _Nonnull maximumDate;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end



SWIFT_CLASS("_TtC10HyperTrack9HTCallout")
@interface HTCallout : NSObject
@property (nonatomic, readonly, copy) NSArray<id <HTBasicComponentProtocol>> * _Nonnull components;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC10HyperTrack13HTCalloutView")
@interface HTCalloutView : UIStackView
@property (nonatomic, strong) HTCallout * _Nullable data;
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end


/// ******** Color Provider *********
SWIFT_PROTOCOL("_TtP10HyperTrack23HTColorProviderProtocol_")
@protocol HTColorProviderProtocol
@property (nonatomic, readonly, strong) UIColor * _Nonnull text;
@property (nonatomic, readonly, strong, getter=default) UIColor * _Nonnull default_;
@property (nonatomic, readonly, strong) UIColor * _Nonnull primary;
@property (nonatomic, readonly, strong) UIColor * _Nonnull secondary;
@property (nonatomic, readonly, strong) UIColor * _Nonnull gray;
@property (nonatomic, readonly, strong) UIColor * _Nonnull error;
@property (nonatomic, readonly, strong) UIColor * _Nonnull brand;
@property (nonatomic, readonly, strong) UIColor * _Nonnull positive;
@property (nonatomic, readonly, strong) UIColor * _Nonnull dropShadow;
@property (nonatomic, readonly, strong) UIColor * _Nonnull errorDark;
@property (nonatomic, readonly, strong) UIColor * _Nonnull lightGray;
@end

enum HTComponentType : NSInteger;

SWIFT_PROTOCOL("_TtP10HyperTrack19HTComponentProtocol_")
@protocol HTComponentProtocol <HTBasicComponentProtocol>
@property (nonatomic, readonly) enum HTComponentType type;
@end

typedef SWIFT_ENUM(NSInteger, HTComponentType) {
  HTComponentTypeUser = 0,
  HTComponentTypeStatus = 1,
  HTComponentTypeUserDetails = 2,
  HTComponentTypeOrderStatus = 3,
  HTComponentTypeOrderInfo = 4,
  HTComponentTypeOrderInfoArray = 5,
};


SWIFT_PROTOCOL("_TtP10HyperTrack26HTDateSwitcherViewDelegate_")
@protocol HTDateSwitcherViewDelegate
- (void)dateChanged:(NSDate * _Nonnull)date;
- (void)openCalendar:(BOOL)open selectedDate:(NSDate * _Nonnull)selectedDate;
@end


SWIFT_CLASS("_TtC10HyperTrack11HTDebouncer")
@interface HTDebouncer : NSObject
- (nonnull instancetype)initWithDelay:(double)delay callback:(void (^ _Nonnull)(void))callback OBJC_DESIGNATED_INITIALIZER;
- (void)call;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end

enum HTErrorCode : NSInteger;

/// The HyperTrack Error object. Contains an error type.
SWIFT_CLASS("_TtC10HyperTrack7HTError")
@interface HTError : NSObject
@property (nonatomic, readonly) enum HTErrorCode errorCode;
@property (nonatomic, copy) NSString * _Nonnull errorMessage;
@property (nonatomic, readonly, copy) NSString * _Nonnull displayErrorMessage;
- (NSString * _Nonnull)toJson SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end

/// The HyperTrack Error type enum.
typedef SWIFT_ENUM(NSInteger, HTErrorCode) {
/// Error for key not set
  HTErrorCodePublishableKeyError = 100,
/// Error for user id not set
  HTErrorCodeUserIdError = 102,
/// Error for location permissions
  HTErrorCodeLocationPermissionsError = 104,
/// Error for location enabled
  HTErrorCodeLocationDisabledError = 105,
/// Invalid location error
  HTErrorCodeInvalidLocationError = 121,
/// Error while fetching ETA
  HTErrorCodeInvalidETAError = 123,
/// Error for invalid parameters
  HTErrorCodeInvalidParamsError = 131,
/// Error for malformed json
  HTErrorCodeJsonError = 142,
/// Error for server errors
  HTErrorCodeServerError = 141,
/// Unknown error
  HTErrorCodeUnknownError = 151,
/// Authorization error
  HTErrorCodeAuthorizationFailedError = 403,
};

@class HyperTrackEvent;
@class CLRegion;

SWIFT_PROTOCOL("_TtP10HyperTrack16HTEventsDelegate_")
@protocol HTEventsDelegate
/// Set this method to receive events on the delegate
/// \param event The event that occurred
///
- (void)didReceiveEvent:(HyperTrackEvent * _Nonnull)event;
/// Set this method to receive errors on the delegate
/// \param error The error that occurred
///
- (void)didFailWithError:(HTError * _Nonnull)error;
@optional
/// Implement this delegate method to get location status update for tracked action
- (void)locationStatusChangedForAction:(HTAction * _Nonnull)action isEnabled:(BOOL)isEnabled;
/// Implement this delegate method to get network status update for tracked action
- (void)networkStatusChangedForAction:(HTAction * _Nonnull)action isConnected:(BOOL)isConnected;
/// Implement this delegate method to get action status update for tracked action like completed,assigned
- (void)actionStatusChangedForAction:(HTAction * _Nonnull)forAction toStatus:(NSString * _Nullable)toStatus;
/// Implement this delegate method to get a callback when action details are refreshed
- (void)didRefreshDataForAction:(HTAction * _Nonnull)forAction;
/// Implement this delegate method to get a callback when action details are refreshed for a collection id
- (void)didRefreshDataForCollectionId:(NSString * _Nonnull)forCollectionId actions:(NSArray<HTAction *> * _Nullable)actions;
- (void)didEnterMonitoredRegionWithRegion:(CLRegion * _Nonnull)region;
- (void)didShowSummaryForAction:(HTAction * _Nonnull)forAction;
@end

enum HTSize : NSInteger;
enum HTFontWeight : NSInteger;
@class UIFont;

/// ******** Font Provider *********
SWIFT_PROTOCOL("_TtP10HyperTrack22HTFontProviderProtocol_")
@protocol HTFontProviderProtocol
- (UIFont * _Nonnull)getFont:(enum HTSize)size weight:(enum HTFontWeight)weight SWIFT_WARN_UNUSED_RESULT;
@end


/// GeoJSON to represent geographic coordinates as documented here: http://geojson.org/
SWIFT_CLASS("_TtC10HyperTrack17HTGeoJSONLocation")
@interface HTGeoJSONLocation : NSObject
/// The geographic geometry type
@property (nonatomic, readonly, copy) NSString * _Nonnull type;
/// The coordinates of the point expressed as [longitude, latitude]
@property (nonatomic, readonly, copy) NSArray<NSNumber *> * _Nonnull coordinates;
/// Method to create geojson object from type and coordinates
- (nonnull instancetype)initWithType:(NSString * _Nonnull)type coordinates:(CLLocationCoordinate2D)coordinates OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithDict:(NSDictionary<NSString *, id> * _Nonnull)dict OBJC_DESIGNATED_INITIALIZER;
/// Get a dictionary represenation of the GeoJSONLocation
- (NSDictionary<NSString *, id> * _Nonnull)toDict SWIFT_WARN_UNUSED_RESULT;
/// Get a json string represenation of the GeoJSONLocation
- (NSString * _Nullable)toJson SWIFT_WARN_UNUSED_RESULT;
/// Convert a json string representation to a HTGeoJSONLocation object
+ (HTGeoJSONLocation * _Nullable)fromDictWithDict:(NSDictionary<NSString *, id> * _Nonnull)dict SWIFT_WARN_UNUSED_RESULT;
- (CLLocationCoordinate2D)toCoordinate2d SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC10HyperTrack8HTHealth")
@interface HTHealth : NSObject
@property (nonatomic, readonly, copy) NSString * _Nullable batteryStatus;
@property (nonatomic, readonly, copy) NSString * _Nullable locationStatus;
@property (nonatomic, readonly, copy) NSString * _Nullable networkStatus;
- (nonnull instancetype)initWithDict:(NSDictionary<NSString *, id> * _Nonnull)dict OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC10HyperTrack7HTLabel")
@interface HTLabel : UILabel
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@end


/// ******** Layer Provider *********
SWIFT_PROTOCOL("_TtP10HyperTrack23HTLayerProviderProtocol_")
@protocol HTLayerProviderProtocol
@property (nonatomic, readonly) CGFloat cornerRadius;
@property (nonatomic, readonly) CGFloat borderWidth;
@end


SWIFT_PROTOCOL("_TtP10HyperTrack30HTTrackingViewProviderProtocol_")
@protocol HTTrackingViewProviderProtocol
@property (nonatomic, strong) id <HTBottomViewUseCaseDelegate> _Nullable delegate;
@property (nonatomic, readonly, strong) UIView * _Nonnull containerView;
- (void)updateData:(NSArray<id <HTComponentProtocol>> * _Nonnull)data;
- (void)reloadData;
@end


SWIFT_PROTOCOL("_TtP10HyperTrack39HTLiveTrackingStackViewProviderProtocol_")
@protocol HTLiveTrackingStackViewProviderProtocol <HTTrackingViewProviderProtocol>
@end

@protocol HTTrackingCustomizationUseCaseDelegate;
@protocol HTLiveTrackingUseCaseViewModelProtocol;

SWIFT_CLASS("_TtC10HyperTrack21HTLiveTrackingUseCase")
@interface HTLiveTrackingUseCase : HTBaseTrackingUseCase <HTMapViewUseCase>
@property (nonatomic, weak) id <HTLiveTrackingUseCaseDelegate> _Nullable trackingDelegate;
@property (nonatomic, weak) id <HTTrackingCustomizationUseCaseDelegate> _Nullable customizationDelegate;
@property (nonatomic, strong) UIButton * _Nonnull primaryActionButton;
@property (nonatomic) BOOL isPrimaryActionHidden;
@property (nonatomic) BOOL isBackButtonHidden;
@property (nonatomic) BOOL isTrackingEnabled;
@property (nonatomic, weak) id <HTUseCaseNavigationDelegate> _Nullable navigationDelegate;
@property (nonatomic, strong) id <HTMapUseCaseDelegate> _Nullable mapDelegate;
- (void)update;
- (nonnull instancetype)init;
+ (nonnull instancetype)new;
- (nonnull instancetype)initWithMapDelegate:(id <HTMapUseCaseDelegate> _Nullable)mapDelegate;
- (nonnull instancetype)initWithViewModel:(id <HTLiveTrackingUseCaseViewModelProtocol> _Nullable)viewModel provider:(id <HTLiveTrackingStackViewProviderProtocol> _Nullable)provider OBJC_DESIGNATED_INITIALIZER;
- (void)stop;
- (void)trackActionWithType:(HTTrackWithTypeData * _Nonnull)type pollDuration:(double)pollDuration completionHandler:(void (^ _Nullable)(NSArray<HTTrackAction *> * _Nullable, HTError * _Nullable))completionHandler;
- (void)trackActionWithIds:(NSArray<NSString *> * _Nonnull)ids pollDuration:(double)pollDuration completionHandler:(void (^ _Nullable)(NSArray<HTTrackAction *> * _Nullable, HTError * _Nullable))completionHandler;
- (void)trackActionWithCollectionId:(NSString * _Nonnull)id pollDuration:(double)pollDuration completionHandler:(void (^ _Nullable)(NSArray<HTTrackAction *> * _Nullable, HTError * _Nullable))completionHandler;
- (void)trackActionWithUniqueId:(NSString * _Nonnull)id pollDuration:(double)pollDuration completionHandler:(void (^ _Nullable)(NSArray<HTTrackAction *> * _Nullable, HTError * _Nullable))completionHandler;
- (void)trackActionWithShortCodes:(NSArray<NSString *> * _Nonnull)codes pollDuration:(double)pollDuration completionHandler:(void (^ _Nullable)(NSArray<HTTrackAction *> * _Nullable, HTError * _Nullable))completionHandler;
- (nonnull instancetype)initWithViewModel:(id <HTBaseTrackingViewModelProtocol> _Nullable)viewModel SWIFT_UNAVAILABLE;
@end


SWIFT_PROTOCOL("_TtP10HyperTrack31HTUseCaseBackNavigationProtocol_")
@protocol HTUseCaseBackNavigationProtocol
@property (nonatomic, strong) UIButton * _Nonnull primaryActionButton;
@property (nonatomic) BOOL isPrimaryActionHidden;
@property (nonatomic, strong) id <HTUseCaseNavigationDelegate> _Nullable navigationDelegate;
- (void)performActionOnButtonClick;
@end


@interface HTLiveTrackingUseCase (SWIFT_EXTENSION(HyperTrack)) <HTUseCaseBackNavigationProtocol>
- (void)performActionOnButtonClick;
@end


@interface HTLiveTrackingUseCase (SWIFT_EXTENSION(HyperTrack)) <HTUseCaseNavigationDelegate>
- (void)backClicked;
@end


@interface HTLiveTrackingUseCase (SWIFT_EXTENSION(HyperTrack))
@end


SWIFT_CLASS("_TtCC10HyperTrack21HTLiveTrackingUseCase8LiveData")
@interface LiveData : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end


@interface HTLiveTrackingUseCase (SWIFT_EXTENSION(HyperTrack)) <HTBottomViewUseCaseDelegate>
- (void)actionPerformed:(HTBottomViewActionData * _Nonnull)data;
@end


SWIFT_PROTOCOL("_TtP10HyperTrack24HTPlaceSelectionDelegate_")
@protocol HTPlaceSelectionDelegate <HTAuxillaryFlowDelegate>
- (void)expectedPlaceSet:(HTPlace * _Nonnull)data;
@end


@interface HTLiveTrackingUseCase (SWIFT_EXTENSION(HyperTrack)) <HTPlaceSelectionDelegate>
- (void)cancelClicked;
- (void)expectedPlaceSet:(HTPlace * _Nonnull)data;
@end


@class TrackingInfo;

SWIFT_PROTOCOL("_TtP10HyperTrack38HTLiveTrackingUseCaseViewModelProtocol_")
@protocol HTLiveTrackingUseCaseViewModelProtocol <HTBaseTrackingViewModelProtocol>
@property (nonatomic, strong) TrackingInfo * _Nonnull trackingInfo;
- (LiveData * _Nonnull)mapToLiveTrackingUseCaseWithActions:(NSArray<HTTrackAction *> * _Nonnull)actions SWIFT_WARN_UNUSED_RESULT;
- (void)mapToLiveTrackingUseCaseWithActions:(NSArray<HTTrackAction *> * _Nonnull)actions completionHandler:(void (^ _Nonnull)(LiveData * _Nonnull))completionHandler;
@end


SWIFT_CLASS("_TtC10HyperTrack30HTLiveTrackingUseCaseViewModel")
@interface HTLiveTrackingUseCaseViewModel : HTBaseTrackingViewModel <HTLiveTrackingUseCaseViewModelProtocol>
@property (nonatomic, strong) TrackingInfo * _Nonnull trackingInfo;
- (void)mapToLiveTrackingUseCaseWithActions:(NSArray<HTTrackAction *> * _Nonnull)actions completionHandler:(void (^ _Nonnull)(LiveData * _Nonnull))completionHandler;
- (LiveData * _Nonnull)mapToLiveTrackingUseCaseWithActions:(NSArray<HTTrackAction *> * _Nonnull)actions SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


@class CLLocation;

/// The HTLocation object that defines all the parameters of a Location fix
SWIFT_CLASS("_TtC10HyperTrack10HTLocation")
@interface HTLocation : NSObject
@property (nonatomic, copy) NSString * _Nullable lookUpId;
/// Geojson location object which stores coordinates
@property (nonatomic, readonly, strong) HTGeoJSONLocation * _Nonnull location;
/// Related CLLocation object
@property (nonatomic, readonly, strong) CLLocation * _Nonnull clLocation;
/// Horizontal accuracy (in meters) of the location
@property (nonatomic, readonly) CLLocationAccuracy horizontalAccuracy;
/// Vertical accuracy (in meters) of the location
@property (nonatomic, readonly) CLLocationAccuracy verticalAccuracy;
/// Recorded speed (in meters) of the location
@property (nonatomic, readonly) CLLocationSpeed speed;
/// Recorded bearing (in degrees) of the location
@property (nonatomic, readonly) CLLocationDirection bearing;
/// Altitude level (in meters) of the location
@property (nonatomic, readonly) CLLocationDistance altitude;
/// Activity when the location was recorded
@property (nonatomic, copy) NSString * _Nonnull activityLookUpId;
/// Provider for the location
@property (nonatomic, readonly, copy) NSString * _Nonnull provider;
/// Timestamp when the location was recorded
@property (nonatomic, copy) NSDate * _Nonnull recordedAt;
@property (nonatomic, copy) NSDate * _Nullable uploadTime;
@property (nonatomic, readonly, copy) NSString * _Nullable activityConfidence;
@property (nonatomic, readonly, copy) NSString * _Nullable activity;
@property (nonatomic, readonly, strong) HTGeoJSONLocation * _Nullable geojson;
@property (nonatomic, readonly, copy) NSString * _Nullable accuracy;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC10HyperTrack20HTLocationCoordinate")
@interface HTLocationCoordinate : NSObject
@property (nonatomic, readonly) double lat;
@property (nonatomic, readonly) double lng;
- (nonnull instancetype)initWithLat:(double)lat lng:(double)lng OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC10HyperTrack24HTLocationSearchProvider")
@interface HTLocationSearchProvider : NSObject
@property (nonatomic, copy) NSArray<HTPlace *> * _Nonnull data;
@property (nonatomic, strong) HTPlace * _Nullable selectedResult;
@property (nonatomic, copy) NSString * _Nonnull searchBarPlaceHolderText;
@property (nonatomic) BOOL enableCurrentLocationSelection;
@property (nonatomic) BOOL enableChooseOnMapSelection;
@property (nonatomic, readonly, strong) UIView * _Nonnull contentView;
- (nonnull instancetype)init;
- (nonnull instancetype)init:(NSArray<HTPlace *> * _Nonnull)data OBJC_DESIGNATED_INITIALIZER;
- (void)updateData:(NSArray<HTPlace *> * _Nonnull)data;
- (void)reloadData;
- (void)clear;
@end

@class UITextField;

@interface HTLocationSearchProvider (SWIFT_EXTENSION(HyperTrack)) <UITextFieldDelegate>
- (BOOL)textFieldShouldReturn:(UITextField * _Nonnull)textField SWIFT_WARN_UNUSED_RESULT;
- (BOOL)textField:(UITextField * _Nonnull)textField shouldChangeCharactersInRange:(NSRange)range replacementString:(NSString * _Nonnull)string SWIFT_WARN_UNUSED_RESULT;
@end

@class UITableView;
@class UITableViewCell;

@interface HTLocationSearchProvider (SWIFT_EXTENSION(HyperTrack)) <UITableViewDataSource>
- (NSInteger)numberOfSectionsInTableView:(UITableView * _Nonnull)tableView SWIFT_WARN_UNUSED_RESULT;
- (NSInteger)tableView:(UITableView * _Nonnull)tableView numberOfRowsInSection:(NSInteger)section SWIFT_WARN_UNUSED_RESULT;
- (UITableViewCell * _Nonnull)tableView:(UITableView * _Nonnull)tableView cellForRowAtIndexPath:(NSIndexPath * _Nonnull)indexPath SWIFT_WARN_UNUSED_RESULT;
@end


@interface HTLocationSearchProvider (SWIFT_EXTENSION(HyperTrack)) <UITableViewDelegate>
- (void)tableView:(UITableView * _Nonnull)tableView didSelectRowAtIndexPath:(NSIndexPath * _Nonnull)indexPath;
- (CGFloat)tableView:(UITableView * _Nonnull)tableView heightForRowAtIndexPath:(NSIndexPath * _Nonnull)indexPath SWIFT_WARN_UNUSED_RESULT;
- (CGFloat)tableView:(UITableView * _Nonnull)tableView heightForHeaderInSection:(NSInteger)section SWIFT_WARN_UNUSED_RESULT;
- (CGFloat)tableView:(UITableView * _Nonnull)tableView heightForFooterInSection:(NSInteger)section SWIFT_WARN_UNUSED_RESULT;
@end


SWIFT_PROTOCOL("_TtP10HyperTrack25HTLocationUpdatesDelegate_")
@protocol HTLocationUpdatesDelegate
- (void)didUpdateLocations:(NSArray<CLLocation *> * _Nonnull)locations;
@end


SWIFT_CLASS("_TtC10HyperTrack8HTLogger")
@interface HTLogger : NSObject
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) HTLogger * _Nonnull shared;)
+ (HTLogger * _Nonnull)shared SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC10HyperTrack14HTMapContainer")
@interface HTMapContainer : UIView
@property (nonatomic) BOOL showCurrentLocation;
@property (nonatomic) BOOL enableZoom;
@property (nonatomic) BOOL isRecenterButtonHidden;
- (void)layoutSubviews;
- (nonnull instancetype)initWithFrame:(CGRect)frame mapProvider:(id <HTMapsProviderProtocol> _Nonnull)mapProvider OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
- (void)setBottomViewWithUseCase:(id <HTMapViewUseCase> _Nonnull)useCase;
@end






SWIFT_PROTOCOL("_TtP10HyperTrack24HTMapViewUpdatesDelegate_")
@protocol HTMapViewUpdatesDelegate
- (void)mapViewDidChangeWithCenterCoordinate:(CLLocationCoordinate2D)centerCoordinate;
@end


@interface HTMapContainer (SWIFT_EXTENSION(HyperTrack)) <HTMapViewUpdatesDelegate>
- (void)mapViewDidChangeWithCenterCoordinate:(CLLocationCoordinate2D)centerCoordinate;
@end





enum HTSwipePosition : NSInteger;

SWIFT_PROTOCOL("_TtP10HyperTrack20HTMapUseCaseDelegate_")
@protocol HTMapUseCaseDelegate <HTMapViewDelegate>
- (void)showErrorWithText:(NSString * _Nullable)text;
- (void)setBottomView:(UIView * _Nullable)view;
- (void)setBottomView:(UIView * _Nullable)view atPosition:(enum HTSwipePosition)atPosition;
- (CGFloat)updateBottomViewPosition:(enum HTSwipePosition)position SWIFT_WARN_UNUSED_RESULT;
- (void)setPrimaryAction:(UIView * _Nullable)view anchor:(enum AnchorPosition)anchor;
- (void)setCenterFloatingView:(UIView * _Nullable)view offset:(CGPoint)offset;
- (void)setMapViewUpdatesDelegate:(id <HTMapViewUpdatesDelegate> _Nullable)delegate;
@property (nonatomic) BOOL enableZoom;
- (CGFloat)getBottomPadding SWIFT_WARN_UNUSED_RESULT;
@end


@interface HTMapContainer (SWIFT_EXTENSION(HyperTrack)) <HTMapUseCaseDelegate>
- (CGFloat)getBottomPadding SWIFT_WARN_UNUSED_RESULT;
- (CGFloat)updateBottomViewPosition:(enum HTSwipePosition)position SWIFT_WARN_UNUSED_RESULT;
- (void)setBottomView:(UIView * _Nullable)view atPosition:(enum HTSwipePosition)atPosition;
- (void)cleanUp;
- (void)addAnnotations:(NSArray<HTAnnotationData *> * _Nonnull)data;
- (void)addPolyline:(NSArray<HTPolylineData *> * _Nonnull)data;
- (void)addTrailingPolyline:(NSArray<HTTimeAwarePolyline *> * _Nonnull)data;
- (void)updateMapVisibleRegion:(UIEdgeInsets)insets;
- (void)setBottomView:(UIView * _Nullable)view;
- (void)setPrimaryAction:(UIView * _Nullable)view anchor:(enum AnchorPosition)anchor;
- (void)setCenterFloatingView:(UIView * _Nullable)view offset:(CGPoint)offset;
- (CLLocationCoordinate2D)getCenterCoordinates SWIFT_WARN_UNUSED_RESULT;
- (void)showErrorWithText:(NSString * _Nullable)text;
- (void)setMapViewUpdatesDelegate:(id <HTMapViewUpdatesDelegate> _Nullable)delegate;
- (void)showCoordinates:(NSArray<NSValue *> * _Nonnull)coordinates;
@end

@class UIImage;

SWIFT_PROTOCOL("_TtP10HyperTrack26HTMapCustomizationDelegate_")
@protocol HTMapCustomizationDelegate
@optional
- (UIImage * _Nullable)userMarkerImageWithAnnotationType:(enum HTAnnotationType)annotationType SWIFT_WARN_UNUSED_RESULT;
- (UIImage * _Nullable)userMarkerImageWithActionInfo:(HTActionInfo * _Nonnull)actionInfo SWIFT_WARN_UNUSED_RESULT;
- (UIImage * _Nullable)expectedPlaceMarkerImage SWIFT_WARN_UNUSED_RESULT;
- (UIImage * _Nullable)expectedPlaceMarkerImageWithActionInfo:(HTActionInfo * _Nonnull)actionInfo SWIFT_WARN_UNUSED_RESULT;
@end


SWIFT_CLASS("_TtC10HyperTrack9HTMapData")
@interface HTMapData : NSObject
- (nonnull instancetype)initWithAnnotations:(NSArray<HTAnnotationData *> * _Nonnull)annotations polylines:(NSArray<HTPolylineData *> * _Nonnull)polylines OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end



SWIFT_CLASS("_TtC10HyperTrack10HTMapUtils")
@interface HTMapUtils : NSObject
+ (CLLocationDegrees)headingFrom:(CLLocationCoordinate2D)previous next:(CLLocationCoordinate2D)next SWIFT_WARN_UNUSED_RESULT;
+ (double)radiansToDegreesWithRadians:(double)radians SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end





@class UIImageView;

SWIFT_CLASS("_TtC10HyperTrack19HTMarkerContentView")
@interface HTMarkerContentView : UIView
@property (nonatomic, strong) UIColor * _Nullable pulseColor;
@property (nonatomic, strong) UIImage * _Nullable annotationImage;
@property (nonatomic, strong) UIImageView * _Nullable imageView;
@property (nonatomic) CGFloat scaleFactor;
@property (nonatomic) double animationDuration;
@property (nonatomic) double animationDelay;
@property (nonatomic) CGSize size;
@property (nonatomic, strong) UIColor * _Nullable annotationColor;
@property (nonatomic) BOOL isPulsating;
- (nonnull instancetype)initWithFrame:(CGRect)frame data:(HTAnnotationData * _Nullable)data;
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@end








/// ******** Layer Provider *********
SWIFT_PROTOCOL("_TtP10HyperTrack30HTMarkerImagesProviderProtocol_")
@protocol HTMarkerImagesProviderProtocol
@property (nonatomic, strong) UIImage * _Nullable cycle;
@property (nonatomic, strong) UIImage * _Nullable destination;
@property (nonatomic, strong) UIImage * _Nullable drive;
@property (nonatomic, strong) UIImage * _Nullable offline;
@property (nonatomic, strong) UIImage * _Nullable stop;
@property (nonatomic, strong) UIImage * _Nullable walk;
@end


SWIFT_CLASS("_TtC10HyperTrack20HTMockLocationParams")
@interface HTMockLocationParams : NSObject
@property (nonatomic, readonly) CLLocationCoordinate2D origin;
@property (nonatomic, readonly) CLLocationCoordinate2D destination;
- (nonnull instancetype)initWithOrigin:(CLLocationCoordinate2D)origin destination:(CLLocationCoordinate2D)destination OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithDestination:(CLLocationCoordinate2D)destination OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC10HyperTrack25HTOrderTrackingBottomCard")
@interface HTOrderTrackingBottomCard : NSObject
@property (nonatomic, readonly, copy) NSArray<id <HTComponentProtocol>> * _Nonnull components;
- (nonnull instancetype)init:(NSArray<id <HTComponentProtocol>> * _Nonnull)components OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end


SWIFT_PROTOCOL("_TtP10HyperTrack40HTOrderTrackingStackViewProviderProtocol_")
@protocol HTOrderTrackingStackViewProviderProtocol <HTTrackingViewProviderProtocol>
@end

@protocol HTOrderTrackingUseCaseDelegate;
@protocol HTOrderTrackingUseCaseViewModelProtocol;

SWIFT_CLASS("_TtC10HyperTrack22HTOrderTrackingUseCase")
@interface HTOrderTrackingUseCase : HTBaseTrackingUseCase <HTMapViewUseCase>
@property (nonatomic, strong) id <HTMapUseCaseDelegate> _Nullable mapDelegate;
@property (nonatomic, readonly, strong) HTButton * _Null_unspecified primaryAction;
@property (nonatomic, weak) id <HTTrackingCustomizationUseCaseDelegate> _Nullable customizationDelegate;
@property (nonatomic, strong) UIButton * _Nonnull primaryActionButton;
@property (nonatomic) BOOL isPrimaryActionHidden;
@property (nonatomic) BOOL isBackButtonHidden;
@property (nonatomic, weak) id <HTOrderTrackingUseCaseDelegate> _Nullable trackingDelegate;
@property (nonatomic, weak) id <HTUseCaseNavigationDelegate> _Nullable navigationDelegate;
- (nonnull instancetype)init;
+ (nonnull instancetype)new;
- (nonnull instancetype)initWithMapDelegate:(id <HTMapUseCaseDelegate> _Nullable)mapDelegate;
- (nonnull instancetype)initWithViewModel:(id <HTOrderTrackingUseCaseViewModelProtocol> _Nullable)viewModel provider:(id <HTOrderTrackingStackViewProviderProtocol> _Nullable)provider OBJC_DESIGNATED_INITIALIZER;
- (void)stop;
- (void)trackActionWithType:(HTTrackWithTypeData * _Nonnull)type pollDuration:(double)pollDuration completionHandler:(void (^ _Nullable)(NSArray<HTTrackAction *> * _Nullable, HTError * _Nullable))completionHandler;
- (void)trackActionWithIds:(NSArray<NSString *> * _Nonnull)ids pollDuration:(double)pollDuration completionHandler:(void (^ _Nullable)(NSArray<HTTrackAction *> * _Nullable, HTError * _Nullable))completionHandler;
- (void)trackActionWithCollectionId:(NSString * _Nonnull)id pollDuration:(double)pollDuration completionHandler:(void (^ _Nullable)(NSArray<HTTrackAction *> * _Nullable, HTError * _Nullable))completionHandler;
- (void)trackActionWithUniqueId:(NSString * _Nonnull)id pollDuration:(double)pollDuration completionHandler:(void (^ _Nullable)(NSArray<HTTrackAction *> * _Nullable, HTError * _Nullable))completionHandler;
- (void)trackActionWithShortCodes:(NSArray<NSString *> * _Nonnull)codes pollDuration:(double)pollDuration completionHandler:(void (^ _Nullable)(NSArray<HTTrackAction *> * _Nullable, HTError * _Nullable))completionHandler;
- (void)update;
- (nonnull instancetype)initWithViewModel:(id <HTBaseTrackingViewModelProtocol> _Nullable)viewModel SWIFT_UNAVAILABLE;
@end




@interface HTOrderTrackingUseCase (SWIFT_EXTENSION(HyperTrack)) <HTUseCaseBackNavigationProtocol>
- (void)performActionOnButtonClick;
@end


@interface HTOrderTrackingUseCase (SWIFT_EXTENSION(HyperTrack))
@end


SWIFT_CLASS("_TtCC10HyperTrack22HTOrderTrackingUseCase9OrderData")
@interface OrderData : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end


SWIFT_PROTOCOL("_TtP10HyperTrack30HTOrderTrackingUseCaseDelegate_")
@protocol HTOrderTrackingUseCaseDelegate <HTBaseUseCaseDelegate>
- (void)placeOrderClicked;
- (void)orderTrackingEnded:(HTTrackWithTypeData * _Nonnull)type;
@end


SWIFT_PROTOCOL("_TtP10HyperTrack39HTOrderTrackingUseCaseViewModelProtocol_")
@protocol HTOrderTrackingUseCaseViewModelProtocol <HTBaseTrackingViewModelProtocol>
- (OrderData * _Nonnull)mapToTrackingUseCaseWithActions:(NSArray<HTTrackAction *> * _Nonnull)actions SWIFT_WARN_UNUSED_RESULT;
@end


SWIFT_CLASS("_TtC10HyperTrack31HTOrderTrackingUseCaseViewModel")
@interface HTOrderTrackingUseCaseViewModel : HTBaseTrackingViewModel <HTOrderTrackingUseCaseViewModelProtocol>
- (OrderData * _Nonnull)mapToTrackingUseCaseWithActions:(NSArray<HTTrackAction *> * _Nonnull)actions SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end



/// ******** Padding Provider *********
SWIFT_PROTOCOL("_TtP10HyperTrack25HTPaddingProviderProtocol_")
@protocol HTPaddingProviderProtocol
@property (nonatomic) CGFloat top;
@property (nonatomic) CGFloat left;
@property (nonatomic) CGFloat right;
@property (nonatomic) CGFloat bottom;
@property (nonatomic) CGFloat verticalInterItem;
@property (nonatomic) CGFloat horizontalInterItem;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong, getter=default) id <HTPaddingProviderProtocol> _Nonnull default_;)
+ (id <HTPaddingProviderProtocol> _Nonnull)default SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) id <HTPaddingProviderProtocol> _Nonnull zero;)
+ (id <HTPaddingProviderProtocol> _Nonnull)zero SWIFT_WARN_UNUSED_RESULT;
@end


/// Instances of HTPlace represent the place entity: https://docs.hypertrack.com/api/entities/place.html
SWIFT_CLASS("_TtC10HyperTrack7HTPlace")
@interface HTPlace : NSObject
/// Unique (uuid4) identifier for the place
@property (nonatomic, readonly, copy) NSString * _Nonnull id;
/// Name of the place
@property (nonatomic, readonly, copy) NSString * _Nonnull name;
/// Location coordinates of the place
@property (nonatomic, readonly, strong) HTGeoJSONLocation * _Nullable location;
/// Address string of the place
@property (nonatomic, readonly, copy) NSString * _Nonnull address;
/// Locality string of the place
@property (nonatomic, readonly, copy) NSString * _Nonnull locality;
/// Landmark of the place
@property (nonatomic, readonly, copy) NSString * _Nonnull landmark;
/// Zip code of the place
@property (nonatomic, readonly, copy) NSString * _Nonnull zipCode;
/// City of the place
@property (nonatomic, readonly, copy) NSString * _Nonnull city;
/// State of the place
@property (nonatomic, readonly, copy) NSString * _Nonnull state;
/// Country of the place
@property (nonatomic, readonly, copy) NSString * _Nonnull country;
@property (nonatomic, readonly, copy) NSString * _Nonnull displayText;
@property (nonatomic, readonly, copy) NSString * _Nonnull uniqueId;
- (nonnull instancetype)initWithDict:(NSDictionary<NSString *, id> * _Nonnull)dict OBJC_DESIGNATED_INITIALIZER;
- (NSString * _Nonnull)getIdentifier SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end




SWIFT_CLASS("_TtC10HyperTrack14HTPlaceBuilder")
@interface HTPlaceBuilder : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (HTPlace * _Nonnull)build SWIFT_WARN_UNUSED_RESULT;
- (HTPlaceBuilder * _Nonnull)setId:(NSString * _Nonnull)id SWIFT_WARN_UNUSED_RESULT;
- (HTPlaceBuilder * _Nonnull)setName:(NSString * _Nonnull)name SWIFT_WARN_UNUSED_RESULT;
- (HTPlaceBuilder * _Nonnull)setLocation:(CLLocationCoordinate2D)coordinates SWIFT_WARN_UNUSED_RESULT;
- (HTPlaceBuilder * _Nonnull)setAddress:(NSString * _Nonnull)address SWIFT_WARN_UNUSED_RESULT;
- (HTPlaceBuilder * _Nonnull)setLandmark:(NSString * _Nonnull)landmark SWIFT_WARN_UNUSED_RESULT;
- (HTPlaceBuilder * _Nonnull)setUniqueId:(NSString * _Nonnull)uniqueId SWIFT_WARN_UNUSED_RESULT;
- (HTPlaceBuilder * _Nonnull)setZipCode:(NSString * _Nonnull)zipCode SWIFT_WARN_UNUSED_RESULT;
- (HTPlaceBuilder * _Nonnull)setCity:(NSString * _Nonnull)city SWIFT_WARN_UNUSED_RESULT;
- (HTPlaceBuilder * _Nonnull)setState:(NSString * _Nonnull)state SWIFT_WARN_UNUSED_RESULT;
- (HTPlaceBuilder * _Nonnull)setCountry:(NSString * _Nonnull)country SWIFT_WARN_UNUSED_RESULT;
@end


SWIFT_CLASS("_TtC10HyperTrack18HTPlaceLineUseCase")
@interface HTPlaceLineUseCase : HTBaseUseCase <HTMapViewUseCase>
@property (nonatomic, weak) id <HTMapUseCaseDelegate> _Nullable mapDelegate;
@property (nonatomic, strong) UIButton * _Nonnull primaryActionButton;
@property (nonatomic) BOOL isBackButtonHidden;
@property (nonatomic) BOOL isPrimaryActionHidden;
@property (nonatomic, weak) id <HTUseCaseNavigationDelegate> _Nullable navigationDelegate;
- (nonnull instancetype)init;
- (nonnull instancetype)initWithMapDelegate:(id <HTMapUseCaseDelegate> _Nullable)mapDelegate;
- (void)update;
- (void)setDate:(NSDate * _Nonnull)date;
@end


@interface HTPlaceLineUseCase (SWIFT_EXTENSION(HyperTrack)) <HTDateSwitcherViewDelegate>
- (void)dateChanged:(NSDate * _Nonnull)date;
@end


@interface HTPlaceLineUseCase (SWIFT_EXTENSION(HyperTrack)) <HTUseCaseBackNavigationProtocol>
- (void)performActionOnButtonClick;
@end


@interface HTPlaceLineUseCase (SWIFT_EXTENSION(HyperTrack)) <HTCalendarDelegate>
- (void)didSelectDate:(NSDate * _Nonnull)date;
- (void)openCalendar:(BOOL)open selectedDate:(NSDate * _Nonnull)selectedDate;
@end


@interface HTPlaceLineUseCase (SWIFT_EXTENSION(HyperTrack))
- (CGFloat)swipePosition:(enum HTSwipePosition)position SWIFT_WARN_UNUSED_RESULT;
- (void)selectedActivity:(HTActivity * _Nonnull)activity;
@end




SWIFT_CLASS("_TtC10HyperTrack23HTPlaceSelectionUseCase")
@interface HTPlaceSelectionUseCase : NSObject <HTMapViewUseCase>
@property (nonatomic, weak) id <HTMapUseCaseDelegate> _Nullable mapDelegate;
@property (nonatomic, weak) id <HTUseCaseNavigationDelegate> _Nullable navigationDelegate;
@property (nonatomic, weak) id <HTPlaceSelectionDelegate> _Nullable delegate;
@property (nonatomic, readonly, strong) HTBottomViewContainer * _Null_unspecified bottomView;
@property (nonatomic, strong) UIButton * _Nonnull primaryActionButton;
@property (nonatomic) BOOL isPrimaryActionHidden;
@property (nonatomic, copy) NSString * _Nonnull searchBarPlaceHolderText;
@property (nonatomic) BOOL enableCurrentLocationSelection;
@property (nonatomic) BOOL enableChooseOnMapSelection;
- (nonnull instancetype)initWithCoordinates:(CLLocationCoordinate2D)coordinates;
- (nonnull instancetype)init;
- (nonnull instancetype)initWithMapDelegate:(id <HTMapUseCaseDelegate> _Nullable)mapDelegate;
- (void)update;
@end


@interface HTPlaceSelectionUseCase (SWIFT_EXTENSION(HyperTrack)) <HTUseCaseBackNavigationProtocol>
- (void)performActionOnButtonClick;
@end


@interface HTPlaceSelectionUseCase (SWIFT_EXTENSION(HyperTrack)) <HTMapViewUpdatesDelegate>
- (void)mapViewDidChangeWithCenterCoordinate:(CLLocationCoordinate2D)centerCoordinate;
@end




SWIFT_PROTOCOL("_TtP10HyperTrack26HTPrimaryActionIntDelegate_")
@protocol HTPrimaryActionIntDelegate <HTAuxillaryFlowDelegate>
- (void)primaryActionClicked:(NSInteger)data;
@end


@interface HTPlaceSelectionUseCase (SWIFT_EXTENSION(HyperTrack))
- (void)cancelClicked;
- (void)primaryActionClicked:(NSInteger)data;
- (void)updatedQuery:(NSString * _Nonnull)query;
@end

@class Display;

SWIFT_CLASS("_TtC10HyperTrack11HTPlaceline")
@interface HTPlaceline : NSObject
@property (nonatomic, readonly, copy) NSString * _Nullable id;
@property (nonatomic, readonly, copy) NSString * _Nullable groupId;
@property (nonatomic, readonly, copy) NSString * _Nullable uniqueId;
@property (nonatomic, readonly, copy) NSString * _Nullable name;
@property (nonatomic, readonly, copy) NSString * _Nullable phone;
@property (nonatomic, readonly, copy) NSString * _Nullable photo;
@property (nonatomic, readonly, copy) NSString * _Nullable availabilityStatus;
@property (nonatomic, readonly, copy) NSString * _Nullable vehicleType;
@property (nonatomic, readonly, strong) HTGeoJSONLocation * _Nullable location;
@property (nonatomic, readonly, strong) Display * _Nullable display;
@property (nonatomic, readonly, copy) NSDate * _Nullable createdAt;
@property (nonatomic, readonly, copy) NSArray<HTActivity *> * _Nonnull placeline;
@property (nonatomic, readonly, strong) HTActivity * _Nullable activity;
@property (nonatomic, readonly, strong) HTHealth * _Nullable health;
@property (nonatomic, readonly, copy) NSString * _Nullable placelineDate;
@property (nonatomic, readonly, copy) NSArray<HTAction *> * _Nonnull actions;
- (nonnull instancetype)initWithDict:(NSDictionary<NSString *, id> * _Nonnull)dict OBJC_DESIGNATED_INITIALIZER;
- (NSString * _Nullable)toJson SWIFT_WARN_UNUSED_RESULT;
- (NSData * _Nullable)toJsonData SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC10HyperTrack14HTPolylineData")
@interface HTPolylineData : NSObject
@property (nonatomic, readonly, copy) NSString * _Nonnull id;
@property (nonatomic, readonly, copy) NSArray<NSValue *> * _Nonnull coordinates;
@property (nonatomic, readonly, copy) NSString * _Nullable encodedRoute;
- (HTPolylineData * _Nonnull)addCoordinate:(CLLocationCoordinate2D)coordinate SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end


@protocol HTStyleProviderProtocol;

SWIFT_CLASS("_TtC10HyperTrack10HTProvider")
@interface HTProvider : NSObject
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, strong) id <HTStyleProviderProtocol> _Nonnull style;)
+ (id <HTStyleProviderProtocol> _Nonnull)style SWIFT_WARN_UNUSED_RESULT;
+ (void)setStyle:(id <HTStyleProviderProtocol> _Nonnull)value;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class) double animationDuration;)
+ (double)animationDuration SWIFT_WARN_UNUSED_RESULT;
+ (void)setAnimationDuration:(double)value;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class) NSInteger numberOfPointsForAnimation;)
+ (NSInteger)numberOfPointsForAnimation SWIFT_WARN_UNUSED_RESULT;
+ (void)setNumberOfPointsForAnimation:(NSInteger)value;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class) double pollDuration;)
+ (double)pollDuration SWIFT_WARN_UNUSED_RESULT;
+ (void)setPollDuration:(double)value;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class) BOOL shouldShowPulsatingMarkers;)
+ (BOOL)shouldShowPulsatingMarkers SWIFT_WARN_UNUSED_RESULT;
+ (void)setShouldShowPulsatingMarkers:(BOOL)value;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class) BOOL shouldShowCallouts;)
+ (BOOL)shouldShowCallouts SWIFT_WARN_UNUSED_RESULT;
+ (void)setShouldShowCallouts:(BOOL)value;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class) BOOL alwaysRotateUserMarker;)
+ (BOOL)alwaysRotateUserMarker SWIFT_WARN_UNUSED_RESULT;
+ (void)setAlwaysRotateUserMarker:(BOOL)value;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class) CGSize userMarkerSize;)
+ (CGSize)userMarkerSize SWIFT_WARN_UNUSED_RESULT;
+ (void)setUserMarkerSize:(CGSize)value;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class) CGSize destinationMarkerSize;)
+ (CGSize)destinationMarkerSize SWIFT_WARN_UNUSED_RESULT;
+ (void)setDestinationMarkerSize:(CGSize)value;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, strong) id <HTMapCustomizationDelegate> _Nullable mapCustomizationDelegate;)
+ (id <HTMapCustomizationDelegate> _Nullable)mapCustomizationDelegate SWIFT_WARN_UNUSED_RESULT;
+ (void)setMapCustomizationDelegate:(id <HTMapCustomizationDelegate> _Nullable)value;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, copy) NSString * _Nullable orderTrackingSummaryTitle;)
+ (NSString * _Nullable)orderTrackingSummaryTitle SWIFT_WARN_UNUSED_RESULT;
+ (void)setOrderTrackingSummaryTitle:(NSString * _Nullable)value;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC10HyperTrack19HTReusableStackView")
@interface HTReusableStackView : UIStackView
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end

@class HTStackViewItem;

SWIFT_PROTOCOL("_TtP10HyperTrack29HTReusableStackViewDataSource_")
@protocol HTReusableStackViewDataSource
- (NSInteger)numberOfItemsIn:(HTReusableStackView * _Nonnull)stackView SWIFT_WARN_UNUSED_RESULT;
- (HTStackViewItem * _Nonnull)stackView:(HTReusableStackView * _Nonnull)stackView viewForRowAt:(NSInteger)index SWIFT_WARN_UNUSED_RESULT;
@end


SWIFT_PROTOCOL("_TtP10HyperTrack27HTReusableStackViewDelegate_")
@protocol HTReusableStackViewDelegate
@end


SWIFT_CLASS("_TtC10HyperTrack9HTSegment")
@interface HTSegment : NSObject
@property (nonatomic, readonly, copy) NSString * _Nonnull lookupId;
@property (nonatomic, copy) NSString * _Nonnull sessionId;
@property (nonatomic, copy) NSString * _Nonnull deviceId;
@property (nonatomic, copy) NSDate * _Nonnull recordedAt;
@property (nonatomic, copy) NSDate * _Nonnull startTime;
@property (nonatomic, copy) NSDate * _Nullable endTime;
@property (nonatomic, copy) NSDate * _Nullable uploadTime;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end

@class CMMotionActivity;

SWIFT_CLASS("_TtC10HyperTrack13HTSDKActivity")
@interface HTSDKActivity : HTSegment
@property (nonatomic) NSInteger stepDistance;
@property (nonatomic) NSInteger stepCount;
@property (nonatomic, copy) NSString * _Nullable experimentId;
@property (nonatomic) double confidence;
+ (HTSDKActivity * _Nonnull)getSDKActivityFromOSActivityWithOsActivity:(CMMotionActivity * _Nonnull)osActivity SWIFT_WARN_UNUSED_RESULT;
+ (double)getConfidenceWithActivity:(CMMotionActivity * _Nonnull)activity SWIFT_WARN_UNUSED_RESULT;
- (NSDictionary<NSString *, id> * _Nonnull)toDict SWIFT_WARN_UNUSED_RESULT;
- (HTActivity * _Nonnull)toHTActivity SWIFT_WARN_UNUSED_RESULT;
@end


SWIFT_CLASS("_TtC10HyperTrack11HTSDKHealth")
@interface HTSDKHealth : HTSegment
- (NSDictionary<NSString *, id> * _Nonnull)toDict SWIFT_WARN_UNUSED_RESULT;
@end



SWIFT_PROTOCOL("_TtP10HyperTrack27HTShareEtaViewModelProtocol_")
@protocol HTShareEtaViewModelProtocol <HTBaseViewModelProtocol>
- (void)getAutocompleteResults:(NSString * _Nonnull)query coordinate:(CLLocationCoordinate2D)coordinate completionHandler:(void (^ _Nullable)(NSArray<HTPlace *> * _Nullable, HTError * _Nullable))completionHandler;
- (void)createPlaceWithGeoJson:(HTGeoJSONLocation * _Nonnull)geoJson completionHandler:(void (^ _Nullable)(HTPlace * _Nullable, HTError * _Nullable))completionHandler;
@end


SWIFT_CLASS("_TtC10HyperTrack26HTShareEtaUseCaseViewModel")
@interface HTShareEtaUseCaseViewModel : NSObject <HTShareEtaViewModelProtocol>
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (void)getAutocompleteResults:(NSString * _Nonnull)query coordinate:(CLLocationCoordinate2D)coordinate completionHandler:(void (^ _Nullable)(NSArray<HTPlace *> * _Nullable, HTError * _Nullable))completionHandler;
- (void)createPlaceWithGeoJson:(HTGeoJSONLocation * _Nonnull)geoJson completionHandler:(void (^ _Nullable)(HTPlace * _Nullable, HTError * _Nullable))completionHandler;
@end



SWIFT_CLASS("_TtC10HyperTrack15HTStackViewItem")
@interface HTStackViewItem : UIView
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_PROTOCOL("_TtP10HyperTrack23HTStyleProviderProtocol_")
@protocol HTStyleProviderProtocol
@property (nonatomic, strong) id <HTColorProviderProtocol> _Nonnull colors;
@property (nonatomic, strong) id <HTFontProviderProtocol> _Nonnull fonts;
@property (nonatomic, strong) id <HTPaddingProviderProtocol> _Nonnull padding;
@property (nonatomic, strong) id <HTLayerProviderProtocol> _Nonnull layer;
@property (nonatomic, strong) id <HTMarkerImagesProviderProtocol> _Nonnull markerImages;
@end


SWIFT_CLASS("_TtC10HyperTrack13HTStyleConfig")
@interface HTStyleConfig : NSObject <HTStyleProviderProtocol>
@property (nonatomic, strong) id <HTColorProviderProtocol> _Nonnull colors;
@property (nonatomic, strong) id <HTFontProviderProtocol> _Nonnull fonts;
@property (nonatomic, strong) id <HTPaddingProviderProtocol> _Nonnull padding;
@property (nonatomic, strong) id <HTLayerProviderProtocol> _Nonnull layer;
@property (nonatomic, strong) id <HTMarkerImagesProviderProtocol> _Nonnull markerImages;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


typedef SWIFT_ENUM(NSInteger, HTSwipePosition) {
  HTSwipePositionExpanded = 0,
  HTSwipePositionCollapsed = 1,
  HTSwipePositionPartial = 2,
  HTSwipePositionNone = 3,
};


SWIFT_PROTOCOL("_TtP10HyperTrack19HTSwipeableProtocol_")
@protocol HTSwipeableProtocol
@property (nonatomic) BOOL isSwipeable;
@property (nonatomic) enum HTSwipePosition position;
@end


SWIFT_CLASS("_TtC10HyperTrack19HTTimeAwarePolyline")
@interface HTTimeAwarePolyline : NSObject
- (HTTimeAwarePolyline * _Nonnull)slice:(NSInteger)maxSize date:(NSDate * _Nonnull)date SWIFT_WARN_UNUSED_RESULT;
- (HTPolylineData * _Nonnull)toPolyline SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC10HyperTrack13HTTrackAction")
@interface HTTrackAction : HTAction
@property (nonatomic, readonly, strong) HTPlace * _Nullable place;
- (nonnull instancetype)initWithDict:(NSDictionary<NSString *, id> * _Nonnull)dict OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC10HyperTrack15HTTrackResponse")
@interface HTTrackResponse : NSObject
@property (nonatomic, readonly) NSInteger count;
@property (nonatomic, readonly, copy) NSString * _Nonnull next;
@property (nonatomic, readonly, copy) NSString * _Nonnull previous;
@property (nonatomic, readonly, copy) NSArray<HTTrackAction *> * _Nonnull actions;
- (nonnull instancetype)initWithDict:(NSDictionary<NSString *, id> * _Nonnull)dict OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end

typedef SWIFT_ENUM(NSInteger, HTTrackWithType) {
  HTTrackWithTypeActionIds = 0,
  HTTrackWithTypeCollectionId = 1,
  HTTrackWithTypeShortCode = 2,
  HTTrackWithTypeUniqueId = 3,
};


SWIFT_CLASS("_TtC10HyperTrack19HTTrackWithTypeData")
@interface HTTrackWithTypeData : NSObject
- (nonnull instancetype)initWithIds:(NSArray<NSString *> * _Nonnull)ids type:(enum HTTrackWithType)type OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithId:(NSString * _Nonnull)id type:(enum HTTrackWithType)type OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end


SWIFT_PROTOCOL("_TtP10HyperTrack38HTTrackingCustomizationUseCaseDelegate_")
@protocol HTTrackingCustomizationUseCaseDelegate
- (BOOL)handleTrackingResponse:(NSArray<HTAction *> * _Nullable)actions error:(HTError * _Nullable)error mapDelegate:(id <HTMapUseCaseDelegate> _Nullable)mapDelegate SWIFT_WARN_UNUSED_RESULT;
@end




@class Display;

SWIFT_CLASS("_TtC10HyperTrack6HTUser")
@interface HTUser : NSObject
/// Unique (uuid4) identifier for the user
@property (nonatomic, readonly, copy) NSString * _Nonnull id;
@property (nonatomic, readonly, copy) NSString * _Nullable groupId;
@property (nonatomic, readonly, copy) NSString * _Nullable uniqueId;
@property (nonatomic, readonly, copy) NSString * _Nullable availabilityStatus;
@property (nonatomic, readonly, copy) NSString * _Nullable vehicleType;
@property (nonatomic, readonly, copy) NSDate * _Nullable lastOnlineAt;
@property (nonatomic, readonly, copy) NSDate * _Nullable createdAt;
@property (nonatomic, readonly, copy) NSDate * _Nullable modifiedAt;
@property (nonatomic, readonly, copy) NSString * _Nullable segmentStatus;
@property (nonatomic, readonly, strong) Display * _Nullable display;
@property (nonatomic, readonly) BOOL isTracking;
/// Name of the user (optional)
@property (nonatomic, readonly, copy) NSString * _Nullable name;
/// Phone number for the user (optional)
@property (nonatomic, readonly, copy) NSString * _Nullable phone;
/// Photo url for the user (optional)
@property (nonatomic, readonly, copy) NSString * _Nullable photo;
/// Last heartbeat timestamp for the user (read-only)
@property (nonatomic, readonly, copy) NSDate * _Nullable lastHeartbeatAt;
/// Last location for the user (read-only)
@property (nonatomic, readonly, strong) HTLocation * _Nullable lastLocation;
/// Last internet connection status of user
@property (nonatomic, readonly) BOOL isConnected;
/// Last location availability status
@property (nonatomic, readonly, copy) NSString * _Nullable locationStatus;
- (nonnull instancetype)initWithDict:(NSDictionary<NSString *, id> * _Nonnull)dict OBJC_DESIGNATED_INITIALIZER;
- (NSString * _Nullable)toJson SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC10HyperTrack14HTUserInfoView")
@interface HTUserInfoView : HTStackViewItem
@property (nonatomic, readonly, strong) UIImageView * _Null_unspecified imageView;
@property (nonatomic, readonly, strong) HTLabel * _Null_unspecified titleLabel;
@property (nonatomic, readonly, strong) HTLabel * _Null_unspecified descriptionLabel;
@property (nonatomic, readonly, strong) HTButton * _Null_unspecified actionButton;
@property (nonatomic, strong) HTBottomViewActionData * _Null_unspecified actionType;
@property (nonatomic, copy) NSString * _Nonnull titleText;
@property (nonatomic, copy) NSString * _Nonnull descriptionText;
@property (nonatomic, strong) UIImage * _Nullable image;
@property (nonatomic, copy) NSString * _Nullable imageUrl;
@property (nonatomic, copy) NSString * _Nonnull actionButtonText;
@property (nonatomic, strong) id <HTPaddingProviderProtocol> _Nonnull padding;
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithFrame:(CGRect)frame padding:(id <HTPaddingProviderProtocol> _Nonnull)padding;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@end




SWIFT_CLASS("_TtC10HyperTrack24HTUserTrackingBottomCard")
@interface HTUserTrackingBottomCard : NSObject
@property (nonatomic, readonly, copy) NSArray<id <HTComponentProtocol>> * _Nonnull components;
- (nonnull instancetype)init:(NSArray<id <HTComponentProtocol>> * _Nonnull)components OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end


/// HyperTrack is the easiest way to build live location features in your application.
/// The SDK is built to collect accurate location data with battery efficiency.
/// The SDK has methods to start and stop tracking, and implement use-cases like order tracking, mileage tracking.
/// For more information, visit http://docs.hypertrack.com
SWIFT_CLASS("_TtC10HyperTrack10HyperTrack")
@interface HyperTrack : NSObject
/// Call this method to initialize HyperTrack SDKs with your Accountâ€™s PublishableKey
/// in the application didFinishLaunchingWithOptions delegate method
/// \param publishableKey Your accountâ€™s publishable key
///
+ (void)initialize:(NSString * _Nonnull)publishableKey;
/// Call this method to get the publishableKey set on the HyperTrack SDK
///
/// returns:
/// The publishableKey configured on the SDK
+ (NSString * _Nullable)getPublishableKey SWIFT_WARN_UNUSED_RESULT;
/// Call this method to start tracking on the SDK. This starts the location service if needed.
/// requires:
/// A userId (either through <code>setUserId</code> or <code>createUser</code>) and a publishable key(through <code>initialize</code>) to be set.
+ (void)resumeTracking;
/// Call this method to start tracking on the SDK. This starts the location service if needed.
/// requires:
/// A userId (either through <code>setUserId</code> or <code>createUser</code>) and a publishable key(through <code>initialize</code>) to be set.
/// \param completionHandler The completion handler which is called with an error if there is an error starting
///
+ (void)resumeTrackingWithCompletionHandler:(void (^ _Nonnull)(HTError * _Nullable))completionHandler;
/// Call this method to get the UserId set on the HyperTrack SDK
///
/// returns:
/// The userId configured on the SDK
+ (NSString * _Nullable)getUserId SWIFT_WARN_UNUSED_RESULT;
/// This attribute refers to the current tracking status of the SDK.
///
/// returns:
/// A boolean representing if the SDK is currently tracking the User
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) BOOL isTracking;)
+ (BOOL)isTracking SWIFT_WARN_UNUSED_RESULT;
/// Call this method to fetch userâ€™s current location.
/// \param completionHandler The completion handler which is called
/// with the fetched location (CLLocation) on success or an error on failure
///
+ (void)getCurrentLocationWithCompletionHandler:(void (^ _Nonnull)(CLLocation * _Nullable, HTError * _Nullable))completionHandler;
/// Call this method to get or create a User on HyperTrack API Server for the current device
/// with given unique_id. Refer to the documentation on creating a user
/// \param userName Name of the user
///
/// \param phone E164 formatted phone number of the user
///
/// \param uniqueId A unique id that you can add to the user to search
///
/// \param completionHandler The completion handler which is called with the newly created user on success or an error on failure
///
+ (void)getOrCreateUserWithName:(NSString * _Nonnull)name phone:(NSString * _Nonnull)phone uniqueId:(NSString * _Nonnull)uniqueId completionHandler:(void (^ _Nonnull)(HTUser * _Nullable, HTError * _Nullable))completionHandler;
+ (void)getUserWithId:(NSString * _Nonnull)id completionHandler:(void (^ _Nonnull)(HTUser * _Nullable, HTError * _Nullable))completionHandler;
/// Call this method to get or create a User on HyperTrack API Server for the current device
/// with given unique_id. Refer to the documentation on creating a user
/// \param userName Name of the user
///
/// \param phone E164 formatted phone number of the user
///
/// \param uniqueId A unique id that you can add to the user to search
///
/// \param photo Image of the user
///
/// \param completionHandler The completion handler which is called with the newly created user on success or an error on failure
///
+ (void)getOrCreateUserWithName:(NSString * _Nonnull)name phone:(NSString * _Nonnull)phone uniqueId:(NSString * _Nonnull)uniqueId photo:(UIImage * _Nullable)photo completionHandler:(void (^ _Nonnull)(HTUser * _Nullable, HTError * _Nullable))completionHandler;
/// Call this method to update a User on HyperTrack API Server for the current user. Refer to the documentation on creating a user
/// \param name updated name of the user
///
/// \param phone (optional) updated E164 formatted phone number of the user
///
/// \param uniqueId (optional) updated unique id that you can add to the user to search
///
/// \param photo (optional) updated image of the user
///
/// \param completionHandler The completion handler which is called with the updated user on success or an error on failure
///
+ (void)updateUserWithName:(NSString * _Nonnull)name phone:(NSString * _Nullable)phone uniqueId:(NSString * _Nullable)uniqueId photo:(UIImage * _Nullable)photo completionHandler:(void (^ _Nonnull)(HTUser * _Nullable, HTError * _Nullable))completionHandler;
/// Call this method to create and assign an Action to the current user.
/// \param actionParams Pass instance of HTActionParams
///
/// \param callback Pass instance of HyperTrack callback as parameter
///
+ (void)createAction:(HTActionParams * _Nonnull)actionParams :(void (^ _Nonnull)(HTAction * _Nullable, HTError * _Nullable))completionHandler;
/// Call this method to get action model for a given actionId
/// \param actionId Pass the actionâ€™s unique id generated on HyperTrack API Server
///
/// \param completionHandler Pass instance of HyperTrack callback as parameter
///
+ (void)getActionForActionId:(NSString * _Nonnull)actionId completionHandler:(void (^ _Nonnull)(HTAction * _Nullable, HTError * _Nullable))completionHandler;
+ (void)getActionsForCollectionId:(NSString * _Nonnull)collectionId completionHandler:(void (^ _Nonnull)(NSArray<HTAction *> * _Nullable, HTError * _Nullable))completionHandler;
+ (void)getActionsForUniqueId:(NSString * _Nonnull)uniqueId :(void (^ _Nonnull)(NSArray<HTAction *> * _Nullable, HTError * _Nullable))completionHandler;
+ (void)getActionsForShortCode:(NSString * _Nonnull)shortCode :(void (^ _Nonnull)(NSArray<HTAction *> * _Nullable, HTError * _Nullable))completionHandler;
/// Call this method to track an Action on MapView embedded in your screen
/// \param actionId Pass the ActionId to be tracked on the mapView
///
/// \param completionHandler Pass instance of completion block as parameter
///
+ (void)trackActionForActionId:(NSString * _Nonnull)actionId completionHandler:(void (^ _Nullable)(HTAction * _Nullable, HTError * _Nullable))completionHandler;
/// Call this method to track an Action on MapView embedded in your screen
/// \param shortCode Pass the action short code to be tracked on the mapView
///
/// \param completionHandler Pass instance of completion block as parameter
///
+ (void)trackActionForShortCode:(NSString * _Nonnull)shortCode completionHandler:(void (^ _Nullable)(HTAction * _Nullable, HTError * _Nullable))completionHandler;
/// Call this method to track an Action on MapView embedded in your screen
/// \param uniqueId Pass the action uniqueId to be tracked on the mapView
///
/// \param completionHandler Pass instance of completion block as parameter
///
+ (void)trackActionForUniqueId:(NSString * _Nonnull)uniqueId completionHandler:(void (^ _Nullable)(NSArray<HTTrackAction *> * _Nullable, HTError * _Nullable))completionHandler;
/// Call this method to track an Action on MapView embedded in your screen
/// \param collectionId Pass the collectionId to be tracked on the mapView
///
/// \param completionHandler Pass instance of completion block as parameter
///
+ (void)trackActionForCollectionId:(NSString * _Nonnull)collectionId completionHandler:(void (^ _Nullable)(NSArray<HTTrackAction *> * _Nullable, HTError * _Nullable))completionHandler;
/// Call this method to complete an action from the SDK with an actionId. Completes the provided actionId on HyperTrack.
/// \param actionId The actionId to complete
///
+ (void)completeAction:(NSString * _Nonnull)actionId;
/// Call this method to complete an action from the SDK with an actionId. Completes the provided actionId on HyperTrack.
/// \param actionId The actionId to complete
///
+ (void)completeActionInSync:(NSString * _Nonnull)actionId completionHandler:(void (^ _Nonnull)(HTAction * _Nullable, HTError * _Nullable))completionHandler;
/// Call this method to complete an action from the SDK with an uniqueId. Completes the provided uniqueId on HyperTrack.
/// \param actionId The actionId to complete
///
+ (void)completeActionWithUniqueIdInSync:(NSString * _Nonnull)uniqueId completionHandler:(void (^ _Nonnull)(HTAction * _Nullable, HTError * _Nullable))completionHandler;
/// Call this method to stop tracking on the SDK and stop all running services.
+ (void)pauseTracking;
+ (void)createMockAction:(HTLocationCoordinate * _Nullable)origin :(HTLocationCoordinate * _Nullable)destination :(HTActionParams * _Nonnull)params completionHandler:(void (^ _Nonnull)(HTAction * _Nullable, HTError * _Nullable))completionHandler;
/// Call this method to stop simulated tracking on the SDK and stop all mock services.
+ (void)completeMockActionWithActionId:(NSString * _Nullable)actionId completionHandler:(void (^ _Nonnull)(HTAction * _Nullable, HTError * _Nullable))completionHandler;
/// Call this method to get Location Authorization status. This can be one of:
/// <ul>
///   <li>
///     notDetermined
///     (User has not yet made a choice with regards to this application)
///   </li>
///   <li>
///     restricted
///     (This application is not authorized to use location services.)
///   </li>
///   <li>
///     denied
///     (User has explicitly denied authorization for this application, or
///     location services are disabled in Settings.)
///   </li>
///   <li>
///     authorizedAlways
///     (User has granted authorization to use their location at any time,
///     including monitoring for regions, visits, or significant location changes.)
///   </li>
///   <li>
///     authorizedWhenInUse
///     (User has granted authorization to use their location only when your app
///     is visible to them.)
///   </li>
/// </ul>
+ (CLAuthorizationStatus)locationAuthorizationStatus SWIFT_WARN_UNUSED_RESULT;
/// Call this method to request the location always permission.
+ (void)requestAlwaysLocationAuthorizationWithCompletionHandler:(void (^ _Nonnull)(BOOL))completionHandler;
/// Call this method to check Motion Activity Authorization status.
/// \param completionHandler The completion handler which is called with a
/// Bool indicating whether motion activity is authorized or not.
///
+ (void)motionAuthorizationStatusWithCompletionHandler:(void (^ _Nonnull)(BOOL))completionHandler;
/// Call this method to check wether the device support activity estimation .
/// Bool indicating whether motion activity is available or not.
+ (BOOL)isActivityAvailable SWIFT_WARN_UNUSED_RESULT;
/// Call this method to request the motion permission.
+ (void)requestMotionAuthorization;
/// Call this method to check if Location Services are enabled or not.
+ (BOOL)locationServicesEnabled SWIFT_WARN_UNUSED_RESULT;
/// Call this method to request the motion permission.
+ (void)requestLocationServices;
/// Call this method to register for remote (silent) notifications inside
/// application(_:didFinishLaunchingWithOptions:launchOptions:)
+ (void)registerForNotifications;
/// Call this method to handle successful remote notification registration
/// inside application(_:didRegisterForRemoteNotificationsWithDeviceToken:)
/// \param deviceToken The device token passed to the didRegisterForRemoteNotificationsWithDeviceToken application method
///
+ (void)didRegisterForRemoteNotificationsWithDeviceTokenWithDeviceToken:(NSData * _Nonnull)deviceToken;
/// Call this method to handle unsuccessful remote notification registration
/// inside application(_:didFailToRegisterForRemoteNotificationsWithError:)
+ (void)didFailToRegisterForRemoteNotificationsWithErrorWithError:(NSError * _Nonnull)error;
/// Call this method to handle receiving a silent (remote) notification
/// inside application(_:didReceiveRemoteNotification:)
+ (void)didReceiveRemoteNotificationWithUserInfo:(NSDictionary * _Nonnull)userInfo;
/// Call this method to check if notification is a HyperTrack notification
/// \param userInfo The user info of the received notification
///
///
/// returns:
/// Boolean denoting whether user info belongs to a HyperTrack notification
+ (BOOL)isHyperTrackNotificationWithUserInfo:(NSDictionary * _Nonnull)userInfo SWIFT_WARN_UNUSED_RESULT;
/// Call this method to get the current placeline activity of the user.
+ (void)getPlacelineWithDate:(NSDate * _Nullable)date userId:(NSString * _Nullable)userId completionHandler:(void (^ _Nonnull)(HTPlaceline * _Nullable, HTError * _Nullable))completionHandler;
/// Call this method to enable console logging
+ (void)enableConsoleLogging;
/// Call this method to get events around actions.
+ (void)setEventsDelegateWithEventDelegate:(id <HTEventsDelegate> _Nonnull)eventDelegate;
/// Call this method to start monitoring for an entry in  place
/// \param place HTPlace object
/// identifier : unique identifier given to the place that needs to be monitored
///
+ (void)setGeofenceAtPlaceWithPlace:(HTPlace * _Nonnull)place radius:(CLLocationDistance)radius identifier:(NSString * _Nonnull)identifier;
+ (CLLocation * _Nullable)getCurrentLocation SWIFT_WARN_UNUSED_RESULT;
+ (HTActivity * _Nullable)getCurrentActivity SWIFT_WARN_UNUSED_RESULT;
+ (void)getPendingActionsWithCompletionHandler:(void (^ _Nonnull)(NSArray<HTAction *> * _Nullable, HTError * _Nullable))completionHandler;
+ (void)setLocationUpdatesDelegate:(id <HTLocationUpdatesDelegate> _Nullable)delegate;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// The HyperTrackEvent object that represents events as they happen in the lifetime of a tracking session
SWIFT_CLASS("_TtC10HyperTrack15HyperTrackEvent")
@interface HyperTrackEvent : NSObject
/// Id of user for the event
@property (nonatomic, readonly, copy) NSString * _Nonnull userId;
/// Id of session for the event
@property (nonatomic, readonly, copy) NSString * _Nonnull sessionId;
/// Id of device for the event
@property (nonatomic, readonly, copy) NSString * _Nonnull deviceId;
/// Timestamp when the event was recorded
@property (nonatomic, copy) NSDate * _Nonnull recordedAt;
/// activityLookUpId
@property (nonatomic, readonly, copy) NSString * _Nonnull activityLookUpId;
/// locationLookUpId
@property (nonatomic, copy) NSString * _Nonnull locationLookUpId;
/// healthLookUpId
@property (nonatomic, readonly, copy) NSString * _Nonnull healthLookUpId;
/// Metadata for the event
@property (nonatomic, copy) NSDictionary<NSString *, id> * _Nonnull data;
- (HTSDKActivity * _Nullable)getActivity SWIFT_WARN_UNUSED_RESULT;
- (HTLocation * _Nullable)getLocation SWIFT_WARN_UNUSED_RESULT;
- (HTSDKHealth * _Nullable)getHealth SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC10HyperTrack15LocationService")
@interface LocationService : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


@interface LocationService (SWIFT_EXTENSION(HyperTrack))
- (void)start;
- (void)stop;
@end

@class CLLocationManager;
@class CLHeading;

@interface LocationService (SWIFT_EXTENSION(HyperTrack)) <CLLocationManagerDelegate>
- (void)locationManager:(CLLocationManager * _Nonnull)manager didChangeAuthorizationStatus:(CLAuthorizationStatus)status;
- (void)locationManager:(CLLocationManager * _Nonnull)manager didUpdateLocations:(NSArray<CLLocation *> * _Nonnull)locations;
- (void)locationManager:(CLLocationManager * _Nonnull)manager didUpdateHeading:(CLHeading * _Nonnull)newHeading;
@end




SWIFT_CLASS("_TtC10HyperTrack13PolylineUtils")
@interface PolylineUtils : NSObject
+ (NSArray<NSValue *> * _Nullable)decodePolyline:(NSString * _Nonnull)encodedPolyline precision:(double)precision SWIFT_WARN_UNUSED_RESULT;
+ (NSArray<CLLocation *> * _Nullable)decodePolylineToCLLocations:(NSString * _Nonnull)encodedPolyline precision:(double)precision SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end






@interface UIFont (SWIFT_EXTENSION(HyperTrack))
@end

typedef SWIFT_ENUM(NSInteger, HTSize) {
  HTSizeTitle = 0,
  HTSizeNormal = 1,
  HTSizeInfo = 2,
  HTSizeCaption = 3,
};

typedef SWIFT_ENUM(NSInteger, HTFontWeight) {
  HTFontWeightBold = 0,
  HTFontWeightMedium = 1,
  HTFontWeightRegular = 2,
};




@interface UIImage (SWIFT_EXTENSION(HyperTrack))
+ (UIImage * _Nullable)getImageFromHTBundleWithNamed:(NSString * _Nonnull)named SWIFT_WARN_UNUSED_RESULT;
@end














@interface UIView (SWIFT_EXTENSION(HyperTrack))
- (void)edges:(UIEdgeInsets)padding;
@end



#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#pragma clang diagnostic pop
